/* eslint-disable */
// source: uclnlp_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("uclnlp_service_nunet_org_uclnlp_service.InputData", null, global);
goog.exportSymbol("uclnlp_service_nunet_org_uclnlp_service.Resp", null, global);
goog.exportSymbol("uclnlp_service_nunet_org_uclnlp_service.Stance", null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
uclnlp_service_nunet_org_uclnlp_service.InputData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(uclnlp_service_nunet_org_uclnlp_service.InputData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  uclnlp_service_nunet_org_uclnlp_service.InputData.displayName = "uclnlp_service_nunet_org_uclnlp_service.InputData";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
uclnlp_service_nunet_org_uclnlp_service.Stance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(uclnlp_service_nunet_org_uclnlp_service.Stance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  uclnlp_service_nunet_org_uclnlp_service.Stance.displayName = "uclnlp_service_nunet_org_uclnlp_service.Stance";
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
uclnlp_service_nunet_org_uclnlp_service.Resp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(uclnlp_service_nunet_org_uclnlp_service.Resp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  uclnlp_service_nunet_org_uclnlp_service.Resp.displayName = "uclnlp_service_nunet_org_uclnlp_service.Resp";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.toObject = function(opt_includeInstance) {
    return uclnlp_service_nunet_org_uclnlp_service.InputData.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!uclnlp_service_nunet_org_uclnlp_service.InputData} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  uclnlp_service_nunet_org_uclnlp_service.InputData.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        headline: jspb.Message.getFieldWithDefault(msg, 1, ""),
        body: jspb.Message.getFieldWithDefault(msg, 2, ""),
        callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.InputData}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new uclnlp_service_nunet_org_uclnlp_service.InputData();
  return uclnlp_service_nunet_org_uclnlp_service.InputData.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.InputData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.InputData}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setHeadline(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setBody(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setCallId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  uclnlp_service_nunet_org_uclnlp_service.InputData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.InputData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadline();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
};

/**
 * optional string headline = 1;
 * @return {string}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.getHeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.InputData} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.setHeadline = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string body = 2;
 * @return {string}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/**
 * @param {string} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.InputData} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional string call_id = 3;
 * @return {string}
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};

/**
 * @param {string} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.InputData} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.InputData.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.toObject = function(opt_includeInstance) {
    return uclnlp_service_nunet_org_uclnlp_service.Stance.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!uclnlp_service_nunet_org_uclnlp_service.Stance} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  uclnlp_service_nunet_org_uclnlp_service.Stance.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        agree: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
        disagree: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
        discuss: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
        unrelated: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new uclnlp_service_nunet_org_uclnlp_service.Stance();
  return uclnlp_service_nunet_org_uclnlp_service.Stance.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.Stance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setAgree(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setDisagree(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setDiscuss(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readFloat());
        msg.setUnrelated(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  uclnlp_service_nunet_org_uclnlp_service.Stance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.Stance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgree();
  if (f !== 0.0) {
    writer.writeFloat(1, f);
  }
  f = message.getDisagree();
  if (f !== 0.0) {
    writer.writeFloat(2, f);
  }
  f = message.getDiscuss();
  if (f !== 0.0) {
    writer.writeFloat(3, f);
  }
  f = message.getUnrelated();
  if (f !== 0.0) {
    writer.writeFloat(4, f);
  }
};

/**
 * optional float agree = 1;
 * @return {number}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.getAgree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};

/**
 * @param {number} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.setAgree = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};

/**
 * optional float disagree = 2;
 * @return {number}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.getDisagree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};

/**
 * @param {number} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.setDisagree = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};

/**
 * optional float discuss = 3;
 * @return {number}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.getDiscuss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};

/**
 * @param {number} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.setDiscuss = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};

/**
 * optional float unrelated = 4;
 * @return {number}
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.getUnrelated = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};

/**
 * @param {number} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Stance} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.Stance.prototype.setUnrelated = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  uclnlp_service_nunet_org_uclnlp_service.Resp.prototype.toObject = function(opt_includeInstance) {
    return uclnlp_service_nunet_org_uclnlp_service.Resp.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!uclnlp_service_nunet_org_uclnlp_service.Resp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  uclnlp_service_nunet_org_uclnlp_service.Resp.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        response: jspb.Message.getFieldWithDefault(msg, 1, ""),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Resp}
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new uclnlp_service_nunet_org_uclnlp_service.Resp();
  return uclnlp_service_nunet_org_uclnlp_service.Resp.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.Resp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Resp}
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setResponse(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  uclnlp_service_nunet_org_uclnlp_service.Resp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!uclnlp_service_nunet_org_uclnlp_service.Resp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string response = 1;
 * @return {string}
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/**
 * @param {string} value
 * @return {!uclnlp_service_nunet_org_uclnlp_service.Resp} returns this
 */
uclnlp_service_nunet_org_uclnlp_service.Resp.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};

goog.object.extend(exports, uclnlp_service_nunet_org_uclnlp_service);
