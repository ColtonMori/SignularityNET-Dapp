/* eslint-disable */
// source: src/assets/thirdPartyServices/nunet-org/fake_news_score_service/fake_news_score.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('fake_news_score_nunet_org_fake_news_score.InputFNS', null, global);
goog.exportSymbol('fake_news_score_nunet_org_fake_news_score.Resp', null, global);
goog.exportSymbol('fake_news_score_nunet_org_fake_news_score.Score', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
fake_news_score_nunet_org_fake_news_score.InputFNS = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(fake_news_score_nunet_org_fake_news_score.InputFNS, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  fake_news_score_nunet_org_fake_news_score.InputFNS.displayName = 'fake_news_score_nunet_org_fake_news_score.InputFNS';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
fake_news_score_nunet_org_fake_news_score.Score = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(fake_news_score_nunet_org_fake_news_score.Score, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  fake_news_score_nunet_org_fake_news_score.Score.displayName = 'fake_news_score_nunet_org_fake_news_score.Score';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
fake_news_score_nunet_org_fake_news_score.Resp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(fake_news_score_nunet_org_fake_news_score.Resp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  fake_news_score_nunet_org_fake_news_score.Resp.displayName = 'fake_news_score_nunet_org_fake_news_score.Resp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.toObject = function(opt_includeInstance) {
  return fake_news_score_nunet_org_fake_news_score.InputFNS.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!fake_news_score_nunet_org_fake_news_score.InputFNS} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.toObject = function(includeInstance, msg) {
  var f, obj = {
    headline: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    callId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tracerInfo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new fake_news_score_nunet_org_fake_news_score.InputFNS;
  return fake_news_score_nunet_org_fake_news_score.InputFNS.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!fake_news_score_nunet_org_fake_news_score.InputFNS} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadline(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTracerInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  fake_news_score_nunet_org_fake_news_score.InputFNS.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!fake_news_score_nunet_org_fake_news_score.InputFNS} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeadline();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCallId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTracerInfo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string headline = 1;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.getHeadline = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS} returns this
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.setHeadline = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS} returns this
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.setBody = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string call_id = 3;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.getCallId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS} returns this
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.setCallId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tracer_info = 4;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.getTracerInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.InputFNS} returns this
 */
fake_news_score_nunet_org_fake_news_score.InputFNS.prototype.setTracerInfo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.toObject = function(opt_includeInstance) {
  return fake_news_score_nunet_org_fake_news_score.Score.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!fake_news_score_nunet_org_fake_news_score.Score} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.Score.toObject = function(includeInstance, msg) {
  var f, obj = {
    stance: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agree: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    disagree: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    discuss: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    unrelated: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!fake_news_score_nunet_org_fake_news_score.Score}
 */
fake_news_score_nunet_org_fake_news_score.Score.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new fake_news_score_nunet_org_fake_news_score.Score;
  return fake_news_score_nunet_org_fake_news_score.Score.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!fake_news_score_nunet_org_fake_news_score.Score} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!fake_news_score_nunet_org_fake_news_score.Score}
 */
fake_news_score_nunet_org_fake_news_score.Score.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAgree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDisagree(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDiscuss(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUnrelated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  fake_news_score_nunet_org_fake_news_score.Score.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!fake_news_score_nunet_org_fake_news_score.Score} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.Score.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStance();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgree();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getDisagree();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDiscuss();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getUnrelated();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string stance = 1;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.getStance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Score} returns this
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.setStance = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double agree = 2;
 * @return {number}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.getAgree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Score} returns this
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.setAgree = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double disagree = 3;
 * @return {number}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.getDisagree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Score} returns this
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.setDisagree = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double discuss = 4;
 * @return {number}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.getDiscuss = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Score} returns this
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.setDiscuss = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double unrelated = 5;
 * @return {number}
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.getUnrelated = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Score} returns this
 */
fake_news_score_nunet_org_fake_news_score.Score.prototype.setUnrelated = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
fake_news_score_nunet_org_fake_news_score.Resp.prototype.toObject = function(opt_includeInstance) {
  return fake_news_score_nunet_org_fake_news_score.Resp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!fake_news_score_nunet_org_fake_news_score.Resp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.Resp.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!fake_news_score_nunet_org_fake_news_score.Resp}
 */
fake_news_score_nunet_org_fake_news_score.Resp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new fake_news_score_nunet_org_fake_news_score.Resp;
  return fake_news_score_nunet_org_fake_news_score.Resp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!fake_news_score_nunet_org_fake_news_score.Resp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!fake_news_score_nunet_org_fake_news_score.Resp}
 */
fake_news_score_nunet_org_fake_news_score.Resp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
fake_news_score_nunet_org_fake_news_score.Resp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  fake_news_score_nunet_org_fake_news_score.Resp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!fake_news_score_nunet_org_fake_news_score.Resp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
fake_news_score_nunet_org_fake_news_score.Resp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
fake_news_score_nunet_org_fake_news_score.Resp.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!fake_news_score_nunet_org_fake_news_score.Resp} returns this
 */
fake_news_score_nunet_org_fake_news_score.Resp.prototype.setResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, fake_news_score_nunet_org_fake_news_score);
