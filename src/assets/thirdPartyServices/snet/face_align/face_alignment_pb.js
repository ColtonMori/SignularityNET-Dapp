/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable*/

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var face_common_pb = require('./face_common_pb.js');
goog.exportSymbol('snet_face_align.FaceAlignmentHeader', null, global);
goog.exportSymbol('snet_face_align.FaceAlignmentRequest', null, global);
goog.exportSymbol('snet_face_align.FaceAlignmentResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceAlignmentHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceAlignmentHeader.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceAlignmentHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceAlignmentHeader.displayName = 'snet_face_align.FaceAlignmentHeader';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceAlignmentHeader.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceAlignmentHeader.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceAlignmentHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceAlignmentHeader} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceAlignmentHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceBboxesList: jspb.Message.toObjectList(msg.getSourceBboxesList(),
    face_common_pb.BoundingBox.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceAlignmentHeader}
 */
snet_face_align.FaceAlignmentHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceAlignmentHeader;
  return snet_face_align.FaceAlignmentHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceAlignmentHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceAlignmentHeader}
 */
snet_face_align.FaceAlignmentHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new face_common_pb.BoundingBox;
      reader.readMessage(value,face_common_pb.BoundingBox.deserializeBinaryFromReader);
      msg.getSourceBboxesList().push(value);
      msg.setSourceBboxesList(msg.getSourceBboxesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceAlignmentHeader} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentHeader.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceAlignmentHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentHeader.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSourceBboxesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      face_common_pb.BoundingBox.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceAlignmentHeader} The clone.
 */
snet_face_align.FaceAlignmentHeader.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceAlignmentHeader} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated BoundingBox source_bboxes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.BoundingBox>}
 */
snet_face_align.FaceAlignmentHeader.prototype.getSourceBboxesList = function() {
  return /** @type{!Array.<!snet_face_align.BoundingBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, face_common_pb.BoundingBox, 1));
};


/** @param {Array.<!snet_face_align.BoundingBox>} value  */
snet_face_align.FaceAlignmentHeader.prototype.setSourceBboxesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_face_align.FaceAlignmentHeader.prototype.clearSourceBboxesList = function() {
  this.setSourceBboxesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceAlignmentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_face_align.FaceAlignmentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceAlignmentRequest.displayName = 'snet_face_align.FaceAlignmentRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceAlignmentRequest.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceAlignmentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceAlignmentRequest} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceAlignmentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    header: (f = msg.getHeader()) && snet_face_align.FaceAlignmentHeader.toObject(includeInstance, f),
    imageChunk: (f = msg.getImageChunk()) && face_common_pb.ImageRGB.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceAlignmentRequest}
 */
snet_face_align.FaceAlignmentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceAlignmentRequest;
  return snet_face_align.FaceAlignmentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceAlignmentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceAlignmentRequest}
 */
snet_face_align.FaceAlignmentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_face_align.FaceAlignmentHeader;
      reader.readMessage(value,snet_face_align.FaceAlignmentHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 2:
      var value = new face_common_pb.ImageRGB;
      reader.readMessage(value,face_common_pb.ImageRGB.deserializeBinaryFromReader);
      msg.setImageChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceAlignmentRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceAlignmentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHeader();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snet_face_align.FaceAlignmentHeader.serializeBinaryToWriter
    );
  }
  f = this.getImageChunk();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      face_common_pb.ImageRGB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceAlignmentRequest} The clone.
 */
snet_face_align.FaceAlignmentRequest.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceAlignmentRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional FaceAlignmentHeader header = 1;
 * @return {snet_face_align.FaceAlignmentHeader}
 */
snet_face_align.FaceAlignmentRequest.prototype.getHeader = function() {
  return /** @type{snet_face_align.FaceAlignmentHeader} */ (
    jspb.Message.getWrapperField(this, snet_face_align.FaceAlignmentHeader, 1));
};


/** @param {snet_face_align.FaceAlignmentHeader|undefined} value  */
snet_face_align.FaceAlignmentRequest.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


snet_face_align.FaceAlignmentRequest.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_face_align.FaceAlignmentRequest.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageRGB image_chunk = 2;
 * @return {snet_face_align.ImageRGB}
 */
snet_face_align.FaceAlignmentRequest.prototype.getImageChunk = function() {
  return /** @type{snet_face_align.ImageRGB} */ (
    jspb.Message.getWrapperField(this, face_common_pb.ImageRGB, 2));
};


/** @param {snet_face_align.ImageRGB|undefined} value  */
snet_face_align.FaceAlignmentRequest.prototype.setImageChunk = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


snet_face_align.FaceAlignmentRequest.prototype.clearImageChunk = function() {
  this.setImageChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_face_align.FaceAlignmentRequest.prototype.hasImageChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceAlignmentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceAlignmentResponse.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceAlignmentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceAlignmentResponse.displayName = 'snet_face_align.FaceAlignmentResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceAlignmentResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceAlignmentResponse.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceAlignmentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceAlignmentResponse} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceAlignmentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    imageChunkList: jspb.Message.toObjectList(msg.getImageChunkList(),
    face_common_pb.ImageRGB.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceAlignmentResponse}
 */
snet_face_align.FaceAlignmentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceAlignmentResponse;
  return snet_face_align.FaceAlignmentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceAlignmentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceAlignmentResponse}
 */
snet_face_align.FaceAlignmentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new face_common_pb.ImageRGB;
      reader.readMessage(value,face_common_pb.ImageRGB.deserializeBinaryFromReader);
      msg.getImageChunkList().push(value);
      msg.setImageChunkList(msg.getImageChunkList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceAlignmentResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceAlignmentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceAlignmentResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getImageChunkList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      face_common_pb.ImageRGB.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceAlignmentResponse} The clone.
 */
snet_face_align.FaceAlignmentResponse.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceAlignmentResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ImageRGB image_chunk = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.ImageRGB>}
 */
snet_face_align.FaceAlignmentResponse.prototype.getImageChunkList = function() {
  return /** @type{!Array.<!snet_face_align.ImageRGB>} */ (
    jspb.Message.getRepeatedWrapperField(this, face_common_pb.ImageRGB, 1));
};


/** @param {Array.<!snet_face_align.ImageRGB>} value  */
snet_face_align.FaceAlignmentResponse.prototype.setImageChunkList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_face_align.FaceAlignmentResponse.prototype.clearImageChunkList = function() {
  this.setImageChunkList([]);
};


goog.object.extend(exports, snet_face_align);
