/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_yolov3_object_detection.Input', null, global);
goog.exportSymbol('snet_yolov3_object_detection.Output', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_yolov3_object_detection.Input = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_yolov3_object_detection.Input, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_yolov3_object_detection.Input.displayName = 'snet_yolov3_object_detection.Input';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_yolov3_object_detection.Input.prototype.toObject = function(opt_includeInstance) {
  return snet_yolov3_object_detection.Input.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_yolov3_object_detection.Input} msg The msg instance to transform.
 * @return {!Object}
 */
snet_yolov3_object_detection.Input.toObject = function(includeInstance, msg) {
  var f, obj = {
    model: msg.getModel(),
    imgPath: msg.getImgPath(),
    confidence: msg.getConfidence()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_yolov3_object_detection.Input}
 */
snet_yolov3_object_detection.Input.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_yolov3_object_detection.Input;
  return snet_yolov3_object_detection.Input.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_yolov3_object_detection.Input} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_yolov3_object_detection.Input}
 */
snet_yolov3_object_detection.Input.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgPath(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_yolov3_object_detection.Input} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_yolov3_object_detection.Input.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_yolov3_object_detection.Input.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_yolov3_object_detection.Input.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getImgPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getConfidence();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_yolov3_object_detection.Input} The clone.
 */
snet_yolov3_object_detection.Input.prototype.cloneMessage = function() {
  return /** @type {!snet_yolov3_object_detection.Input} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string model = 1;
 * @return {string}
 */
snet_yolov3_object_detection.Input.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Input.prototype.setModel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string img_path = 2;
 * @return {string}
 */
snet_yolov3_object_detection.Input.prototype.getImgPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Input.prototype.setImgPath = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string confidence = 3;
 * @return {string}
 */
snet_yolov3_object_detection.Input.prototype.getConfidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Input.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_yolov3_object_detection.Output = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_yolov3_object_detection.Output, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_yolov3_object_detection.Output.displayName = 'snet_yolov3_object_detection.Output';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_yolov3_object_detection.Output.prototype.toObject = function(opt_includeInstance) {
  return snet_yolov3_object_detection.Output.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_yolov3_object_detection.Output} msg The msg instance to transform.
 * @return {!Object}
 */
snet_yolov3_object_detection.Output.toObject = function(includeInstance, msg) {
  var f, obj = {
    deltaTime: msg.getDeltaTime(),
    boxes: msg.getBoxes(),
    classIds: msg.getClassIds(),
    confidences: msg.getConfidences(),
    imgBase64: msg.getImgBase64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_yolov3_object_detection.Output}
 */
snet_yolov3_object_detection.Output.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_yolov3_object_detection.Output;
  return snet_yolov3_object_detection.Output.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_yolov3_object_detection.Output} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_yolov3_object_detection.Output}
 */
snet_yolov3_object_detection.Output.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeltaTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBoxes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClassIds(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfidences(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setImgBase64(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_yolov3_object_detection.Output} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_yolov3_object_detection.Output.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_yolov3_object_detection.Output.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_yolov3_object_detection.Output.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDeltaTime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getBoxes();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getClassIds();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getConfidences();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getImgBase64();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_yolov3_object_detection.Output} The clone.
 */
snet_yolov3_object_detection.Output.prototype.cloneMessage = function() {
  return /** @type {!snet_yolov3_object_detection.Output} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string delta_time = 1;
 * @return {string}
 */
snet_yolov3_object_detection.Output.prototype.getDeltaTime = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Output.prototype.setDeltaTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string boxes = 2;
 * @return {string}
 */
snet_yolov3_object_detection.Output.prototype.getBoxes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Output.prototype.setBoxes = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string class_ids = 3;
 * @return {string}
 */
snet_yolov3_object_detection.Output.prototype.getClassIds = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Output.prototype.setClassIds = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string confidences = 4;
 * @return {string}
 */
snet_yolov3_object_detection.Output.prototype.getConfidences = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Output.prototype.setConfidences = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string img_base64 = 5;
 * @return {string}
 */
snet_yolov3_object_detection.Output.prototype.getImgBase64 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
snet_yolov3_object_detection.Output.prototype.setImgBase64 = function(value) {
  jspb.Message.setField(this, 5, value);
};


goog.object.extend(exports, snet_yolov3_object_detection);
