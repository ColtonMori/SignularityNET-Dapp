/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable*/

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_moses_service.AnalysisParameters', null, global);
goog.exportSymbol('snet_moses_service.CrossValOptions', null, global);
goog.exportSymbol('snet_moses_service.Filter', null, global);
goog.exportSymbol('snet_moses_service.Result', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_moses_service.CrossValOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_moses_service.CrossValOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_moses_service.CrossValOptions.displayName = 'snet_moses_service.CrossValOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_moses_service.CrossValOptions.prototype.toObject = function(opt_includeInstance) {
  return snet_moses_service.CrossValOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_moses_service.CrossValOptions} msg The msg instance to transform.
 * @return {!Object}
 */
snet_moses_service.CrossValOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    folds: msg.getFolds(),
    testsize: msg.getTestsize(),
    randomseed: msg.getRandomseed()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_moses_service.CrossValOptions}
 */
snet_moses_service.CrossValOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_moses_service.CrossValOptions;
  return snet_moses_service.CrossValOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_moses_service.CrossValOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_moses_service.CrossValOptions}
 */
snet_moses_service.CrossValOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFolds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTestsize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRandomseed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_moses_service.CrossValOptions} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.CrossValOptions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_moses_service.CrossValOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.CrossValOptions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFolds();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getTestsize();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = this.getRandomseed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_moses_service.CrossValOptions} The clone.
 */
snet_moses_service.CrossValOptions.prototype.cloneMessage = function() {
  return /** @type {!snet_moses_service.CrossValOptions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 folds = 1;
 * @return {number}
 */
snet_moses_service.CrossValOptions.prototype.getFolds = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
snet_moses_service.CrossValOptions.prototype.setFolds = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float testSize = 2;
 * @return {number}
 */
snet_moses_service.CrossValOptions.prototype.getTestsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_moses_service.CrossValOptions.prototype.setTestsize = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 randomSeed = 3;
 * @return {number}
 */
snet_moses_service.CrossValOptions.prototype.getRandomseed = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
snet_moses_service.CrossValOptions.prototype.setRandomseed = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_moses_service.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_moses_service.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_moses_service.Filter.displayName = 'snet_moses_service.Filter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_moses_service.Filter.prototype.toObject = function(opt_includeInstance) {
  return snet_moses_service.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_moses_service.Filter} msg The msg instance to transform.
 * @return {!Object}
 */
snet_moses_service.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    score: msg.getScore(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_moses_service.Filter}
 */
snet_moses_service.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_moses_service.Filter;
  return snet_moses_service.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_moses_service.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_moses_service.Filter}
 */
snet_moses_service.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_moses_service.Filter} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.Filter.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_moses_service.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.Filter.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getScore();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_moses_service.Filter} The clone.
 */
snet_moses_service.Filter.prototype.cloneMessage = function() {
  return /** @type {!snet_moses_service.Filter} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string score = 1;
 * @return {string}
 */
snet_moses_service.Filter.prototype.getScore = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_moses_service.Filter.prototype.setScore = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float value = 2;
 * @return {number}
 */
snet_moses_service.Filter.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_moses_service.Filter.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_moses_service.AnalysisParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_moses_service.AnalysisParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_moses_service.AnalysisParameters.displayName = 'snet_moses_service.AnalysisParameters';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_moses_service.AnalysisParameters.prototype.toObject = function(opt_includeInstance) {
  return snet_moses_service.AnalysisParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_moses_service.AnalysisParameters} msg The msg instance to transform.
 * @return {!Object}
 */
snet_moses_service.AnalysisParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    mosesopts: msg.getMosesopts(),
    crossvalopts: (f = msg.getCrossvalopts()) && snet_moses_service.CrossValOptions.toObject(includeInstance, f),
    targetfeature: msg.getTargetfeature(),
    filter: (f = msg.getFilter()) && snet_moses_service.Filter.toObject(includeInstance, f),
    dataset: msg.getDataset()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_moses_service.AnalysisParameters}
 */
snet_moses_service.AnalysisParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_moses_service.AnalysisParameters;
  return snet_moses_service.AnalysisParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_moses_service.AnalysisParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_moses_service.AnalysisParameters}
 */
snet_moses_service.AnalysisParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMosesopts(value);
      break;
    case 2:
      var value = new snet_moses_service.CrossValOptions;
      reader.readMessage(value,snet_moses_service.CrossValOptions.deserializeBinaryFromReader);
      msg.setCrossvalopts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetfeature(value);
      break;
    case 4:
      var value = new snet_moses_service.Filter;
      reader.readMessage(value,snet_moses_service.Filter.deserializeBinaryFromReader);
      msg.setFilter(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_moses_service.AnalysisParameters} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.AnalysisParameters.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_moses_service.AnalysisParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.AnalysisParameters.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMosesopts();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCrossvalopts();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      snet_moses_service.CrossValOptions.serializeBinaryToWriter
    );
  }
  f = this.getTargetfeature();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getFilter();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      snet_moses_service.Filter.serializeBinaryToWriter
    );
  }
  f = this.getDataset();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_moses_service.AnalysisParameters} The clone.
 */
snet_moses_service.AnalysisParameters.prototype.cloneMessage = function() {
  return /** @type {!snet_moses_service.AnalysisParameters} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string mosesOpts = 1;
 * @return {string}
 */
snet_moses_service.AnalysisParameters.prototype.getMosesopts = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_moses_service.AnalysisParameters.prototype.setMosesopts = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CrossValOptions crossValOpts = 2;
 * @return {snet_moses_service.CrossValOptions}
 */
snet_moses_service.AnalysisParameters.prototype.getCrossvalopts = function() {
  return /** @type{snet_moses_service.CrossValOptions} */ (
    jspb.Message.getWrapperField(this, snet_moses_service.CrossValOptions, 2));
};


/** @param {snet_moses_service.CrossValOptions|undefined} value  */
snet_moses_service.AnalysisParameters.prototype.setCrossvalopts = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


snet_moses_service.AnalysisParameters.prototype.clearCrossvalopts = function() {
  this.setCrossvalopts(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_moses_service.AnalysisParameters.prototype.hasCrossvalopts = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string targetFeature = 3;
 * @return {string}
 */
snet_moses_service.AnalysisParameters.prototype.getTargetfeature = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
snet_moses_service.AnalysisParameters.prototype.setTargetfeature = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Filter filter = 4;
 * @return {snet_moses_service.Filter}
 */
snet_moses_service.AnalysisParameters.prototype.getFilter = function() {
  return /** @type{snet_moses_service.Filter} */ (
    jspb.Message.getWrapperField(this, snet_moses_service.Filter, 4));
};


/** @param {snet_moses_service.Filter|undefined} value  */
snet_moses_service.AnalysisParameters.prototype.setFilter = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


snet_moses_service.AnalysisParameters.prototype.clearFilter = function() {
  this.setFilter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_moses_service.AnalysisParameters.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string dataset = 5;
 * @return {string}
 */
snet_moses_service.AnalysisParameters.prototype.getDataset = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
snet_moses_service.AnalysisParameters.prototype.setDataset = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_moses_service.Result = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_moses_service.Result, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_moses_service.Result.displayName = 'snet_moses_service.Result';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_moses_service.Result.prototype.toObject = function(opt_includeInstance) {
  return snet_moses_service.Result.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_moses_service.Result} msg The msg instance to transform.
 * @return {!Object}
 */
snet_moses_service.Result.toObject = function(includeInstance, msg) {
  var f, obj = {
    resulturl: msg.getResulturl(),
    description: msg.getDescription()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_moses_service.Result}
 */
snet_moses_service.Result.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_moses_service.Result;
  return snet_moses_service.Result.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_moses_service.Result} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_moses_service.Result}
 */
snet_moses_service.Result.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResulturl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_moses_service.Result} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.Result.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_moses_service.Result.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_moses_service.Result.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResulturl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_moses_service.Result} The clone.
 */
snet_moses_service.Result.prototype.cloneMessage = function() {
  return /** @type {!snet_moses_service.Result} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string resultUrl = 1;
 * @return {string}
 */
snet_moses_service.Result.prototype.getResulturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_moses_service.Result.prototype.setResulturl = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
snet_moses_service.Result.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_moses_service.Result.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, snet_moses_service);
