/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_topic_analysis.FloatRow', null, global);
goog.exportSymbol('snet_topic_analysis.PLSARequest', null, global);
goog.exportSymbol('snet_topic_analysis.PLSAResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_topic_analysis.PLSARequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_topic_analysis.PLSARequest.repeatedFields_, null);
};
goog.inherits(snet_topic_analysis.PLSARequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_topic_analysis.PLSARequest.displayName = 'snet_topic_analysis.PLSARequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_topic_analysis.PLSARequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_topic_analysis.PLSARequest.prototype.toObject = function(opt_includeInstance) {
  return snet_topic_analysis.PLSARequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_topic_analysis.PLSARequest} msg The msg instance to transform.
 * @return {!Object}
 */
snet_topic_analysis.PLSARequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    docsList: jspb.Message.getField(msg, 1),
    numTopics: msg.getNumTopics(),
    topicDivider: msg.getTopicDivider(),
    maxiter: msg.getMaxiter(),
    beta: msg.getBeta()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_topic_analysis.PLSARequest}
 */
snet_topic_analysis.PLSARequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_topic_analysis.PLSARequest;
  return snet_topic_analysis.PLSARequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_topic_analysis.PLSARequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_topic_analysis.PLSARequest}
 */
snet_topic_analysis.PLSARequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getDocsList().push(value);
      msg.setDocsList(msg.getDocsList());
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setNumTopics(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setTopicDivider(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setMaxiter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_topic_analysis.PLSARequest} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.PLSARequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_topic_analysis.PLSARequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.PLSARequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDocsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getNumTopics();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = this.getTopicDivider();
  if (f !== 0) {
    writer.writeSint64(
      3,
      f
    );
  }
  f = this.getMaxiter();
  if (f !== 0) {
    writer.writeSint64(
      4,
      f
    );
  }
  f = this.getBeta();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_topic_analysis.PLSARequest} The clone.
 */
snet_topic_analysis.PLSARequest.prototype.cloneMessage = function() {
  return /** @type {!snet_topic_analysis.PLSARequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string docs = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_topic_analysis.PLSARequest.prototype.getDocsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_topic_analysis.PLSARequest.prototype.setDocsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_topic_analysis.PLSARequest.prototype.clearDocsList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * optional sint64 num_topics = 2;
 * @return {number}
 */
snet_topic_analysis.PLSARequest.prototype.getNumTopics = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_topic_analysis.PLSARequest.prototype.setNumTopics = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional sint64 topic_divider = 3;
 * @return {number}
 */
snet_topic_analysis.PLSARequest.prototype.getTopicDivider = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
snet_topic_analysis.PLSARequest.prototype.setTopicDivider = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional sint64 maxiter = 4;
 * @return {number}
 */
snet_topic_analysis.PLSARequest.prototype.getMaxiter = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
snet_topic_analysis.PLSARequest.prototype.setMaxiter = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional double beta = 5;
 * @return {number}
 */
snet_topic_analysis.PLSARequest.prototype.getBeta = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
snet_topic_analysis.PLSARequest.prototype.setBeta = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_topic_analysis.FloatRow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_topic_analysis.FloatRow.repeatedFields_, null);
};
goog.inherits(snet_topic_analysis.FloatRow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_topic_analysis.FloatRow.displayName = 'snet_topic_analysis.FloatRow';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_topic_analysis.FloatRow.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_topic_analysis.FloatRow.prototype.toObject = function(opt_includeInstance) {
  return snet_topic_analysis.FloatRow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_topic_analysis.FloatRow} msg The msg instance to transform.
 * @return {!Object}
 */
snet_topic_analysis.FloatRow.toObject = function(includeInstance, msg) {
  var f, obj = {
    doublevalueList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_topic_analysis.FloatRow}
 */
snet_topic_analysis.FloatRow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_topic_analysis.FloatRow;
  return snet_topic_analysis.FloatRow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_topic_analysis.FloatRow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_topic_analysis.FloatRow}
 */
snet_topic_analysis.FloatRow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setDoublevalueList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_topic_analysis.FloatRow} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.FloatRow.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_topic_analysis.FloatRow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.FloatRow.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDoublevalueList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_topic_analysis.FloatRow} The clone.
 */
snet_topic_analysis.FloatRow.prototype.cloneMessage = function() {
  return /** @type {!snet_topic_analysis.FloatRow} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated double doubleValue = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
snet_topic_analysis.FloatRow.prototype.getDoublevalueList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {Array.<number>} value  */
snet_topic_analysis.FloatRow.prototype.setDoublevalueList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_topic_analysis.FloatRow.prototype.clearDoublevalueList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_topic_analysis.PLSAResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_topic_analysis.PLSAResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_topic_analysis.PLSAResponse.displayName = 'snet_topic_analysis.PLSAResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_topic_analysis.PLSAResponse.prototype.toObject = function(opt_includeInstance) {
  return snet_topic_analysis.PLSAResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_topic_analysis.PLSAResponse} msg The msg instance to transform.
 * @return {!Object}
 */
snet_topic_analysis.PLSAResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    message: msg.getMessage(),
    handle: msg.getHandle()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_topic_analysis.PLSAResponse}
 */
snet_topic_analysis.PLSAResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_topic_analysis.PLSAResponse;
  return snet_topic_analysis.PLSAResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_topic_analysis.PLSAResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_topic_analysis.PLSAResponse}
 */
snet_topic_analysis.PLSAResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_topic_analysis.PLSAResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.PLSAResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_topic_analysis.PLSAResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_topic_analysis.PLSAResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_topic_analysis.PLSAResponse} The clone.
 */
snet_topic_analysis.PLSAResponse.prototype.cloneMessage = function() {
  return /** @type {!snet_topic_analysis.PLSAResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
snet_topic_analysis.PLSAResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
snet_topic_analysis.PLSAResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
snet_topic_analysis.PLSAResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_topic_analysis.PLSAResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string handle = 3;
 * @return {string}
 */
snet_topic_analysis.PLSAResponse.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
snet_topic_analysis.PLSAResponse.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 3, value);
};


goog.object.extend(exports, snet_topic_analysis);
