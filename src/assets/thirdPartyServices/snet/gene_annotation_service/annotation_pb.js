/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_gene_annotation_service.Annotation', null, global);
goog.exportSymbol('snet_gene_annotation_service.AnnotationRequest', null, global);
goog.exportSymbol('snet_gene_annotation_service.AnnotationResponse', null, global);
goog.exportSymbol('snet_gene_annotation_service.Filter', null, global);
goog.exportSymbol('snet_gene_annotation_service.Gene', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_gene_annotation_service.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_gene_annotation_service.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_gene_annotation_service.Filter.displayName = 'snet_gene_annotation_service.Filter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_gene_annotation_service.Filter.prototype.toObject = function(opt_includeInstance) {
  return snet_gene_annotation_service.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_gene_annotation_service.Filter} msg The msg instance to transform.
 * @return {!Object}
 */
snet_gene_annotation_service.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: msg.getFilter(),
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_gene_annotation_service.Filter}
 */
snet_gene_annotation_service.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_gene_annotation_service.Filter;
  return snet_gene_annotation_service.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_gene_annotation_service.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_gene_annotation_service.Filter}
 */
snet_gene_annotation_service.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_gene_annotation_service.Filter} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Filter.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_gene_annotation_service.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Filter.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFilter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_gene_annotation_service.Filter} The clone.
 */
snet_gene_annotation_service.Filter.prototype.cloneMessage = function() {
  return /** @type {!snet_gene_annotation_service.Filter} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string filter = 1;
 * @return {string}
 */
snet_gene_annotation_service.Filter.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.Filter.prototype.setFilter = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
snet_gene_annotation_service.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.Filter.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_gene_annotation_service.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_gene_annotation_service.Annotation.repeatedFields_, null);
};
goog.inherits(snet_gene_annotation_service.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_gene_annotation_service.Annotation.displayName = 'snet_gene_annotation_service.Annotation';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_gene_annotation_service.Annotation.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_gene_annotation_service.Annotation.prototype.toObject = function(opt_includeInstance) {
  return snet_gene_annotation_service.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_gene_annotation_service.Annotation} msg The msg instance to transform.
 * @return {!Object}
 */
snet_gene_annotation_service.Annotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    functionname: msg.getFunctionname(),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    snet_gene_annotation_service.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_gene_annotation_service.Annotation}
 */
snet_gene_annotation_service.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_gene_annotation_service.Annotation;
  return snet_gene_annotation_service.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_gene_annotation_service.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_gene_annotation_service.Annotation}
 */
snet_gene_annotation_service.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFunctionname(value);
      break;
    case 2:
      var value = new snet_gene_annotation_service.Filter;
      reader.readMessage(value,snet_gene_annotation_service.Filter.deserializeBinaryFromReader);
      msg.getFiltersList().push(value);
      msg.setFiltersList(msg.getFiltersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_gene_annotation_service.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Annotation.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_gene_annotation_service.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Annotation.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFunctionname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_gene_annotation_service.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_gene_annotation_service.Annotation} The clone.
 */
snet_gene_annotation_service.Annotation.prototype.cloneMessage = function() {
  return /** @type {!snet_gene_annotation_service.Annotation} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string functionName = 1;
 * @return {string}
 */
snet_gene_annotation_service.Annotation.prototype.getFunctionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.Annotation.prototype.setFunctionname = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Filter filters = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_gene_annotation_service.Filter>}
 */
snet_gene_annotation_service.Annotation.prototype.getFiltersList = function() {
  return /** @type{!Array.<!snet_gene_annotation_service.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_gene_annotation_service.Filter, 2));
};


/** @param {Array.<!snet_gene_annotation_service.Filter>} value  */
snet_gene_annotation_service.Annotation.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_gene_annotation_service.Annotation.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_gene_annotation_service.Gene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_gene_annotation_service.Gene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_gene_annotation_service.Gene.displayName = 'snet_gene_annotation_service.Gene';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_gene_annotation_service.Gene.prototype.toObject = function(opt_includeInstance) {
  return snet_gene_annotation_service.Gene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_gene_annotation_service.Gene} msg The msg instance to transform.
 * @return {!Object}
 */
snet_gene_annotation_service.Gene.toObject = function(includeInstance, msg) {
  var f, obj = {
    genename: msg.getGenename()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_gene_annotation_service.Gene}
 */
snet_gene_annotation_service.Gene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_gene_annotation_service.Gene;
  return snet_gene_annotation_service.Gene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_gene_annotation_service.Gene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_gene_annotation_service.Gene}
 */
snet_gene_annotation_service.Gene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_gene_annotation_service.Gene} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Gene.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_gene_annotation_service.Gene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.Gene.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGenename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_gene_annotation_service.Gene} The clone.
 */
snet_gene_annotation_service.Gene.prototype.cloneMessage = function() {
  return /** @type {!snet_gene_annotation_service.Gene} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string geneName = 1;
 * @return {string}
 */
snet_gene_annotation_service.Gene.prototype.getGenename = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.Gene.prototype.setGenename = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_gene_annotation_service.AnnotationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_gene_annotation_service.AnnotationRequest.repeatedFields_, null);
};
goog.inherits(snet_gene_annotation_service.AnnotationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_gene_annotation_service.AnnotationRequest.displayName = 'snet_gene_annotation_service.AnnotationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_gene_annotation_service.AnnotationRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_gene_annotation_service.AnnotationRequest.prototype.toObject = function(opt_includeInstance) {
  return snet_gene_annotation_service.AnnotationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_gene_annotation_service.AnnotationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
snet_gene_annotation_service.AnnotationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    snet_gene_annotation_service.Annotation.toObject, includeInstance),
    genesList: jspb.Message.toObjectList(msg.getGenesList(),
    snet_gene_annotation_service.Gene.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_gene_annotation_service.AnnotationRequest}
 */
snet_gene_annotation_service.AnnotationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_gene_annotation_service.AnnotationRequest;
  return snet_gene_annotation_service.AnnotationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_gene_annotation_service.AnnotationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_gene_annotation_service.AnnotationRequest}
 */
snet_gene_annotation_service.AnnotationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_gene_annotation_service.Annotation;
      reader.readMessage(value,snet_gene_annotation_service.Annotation.deserializeBinaryFromReader);
      msg.getAnnotationsList().push(value);
      msg.setAnnotationsList(msg.getAnnotationsList());
      break;
    case 2:
      var value = new snet_gene_annotation_service.Gene;
      reader.readMessage(value,snet_gene_annotation_service.Gene.deserializeBinaryFromReader);
      msg.getGenesList().push(value);
      msg.setGenesList(msg.getGenesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_gene_annotation_service.AnnotationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.AnnotationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_gene_annotation_service.AnnotationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.AnnotationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      snet_gene_annotation_service.Annotation.serializeBinaryToWriter
    );
  }
  f = this.getGenesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_gene_annotation_service.Gene.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_gene_annotation_service.AnnotationRequest} The clone.
 */
snet_gene_annotation_service.AnnotationRequest.prototype.cloneMessage = function() {
  return /** @type {!snet_gene_annotation_service.AnnotationRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Annotation annotations = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_gene_annotation_service.Annotation>}
 */
snet_gene_annotation_service.AnnotationRequest.prototype.getAnnotationsList = function() {
  return /** @type{!Array.<!snet_gene_annotation_service.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_gene_annotation_service.Annotation, 1));
};


/** @param {Array.<!snet_gene_annotation_service.Annotation>} value  */
snet_gene_annotation_service.AnnotationRequest.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_gene_annotation_service.AnnotationRequest.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};


/**
 * repeated Gene genes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_gene_annotation_service.Gene>}
 */
snet_gene_annotation_service.AnnotationRequest.prototype.getGenesList = function() {
  return /** @type{!Array.<!snet_gene_annotation_service.Gene>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_gene_annotation_service.Gene, 2));
};


/** @param {Array.<!snet_gene_annotation_service.Gene>} value  */
snet_gene_annotation_service.AnnotationRequest.prototype.setGenesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_gene_annotation_service.AnnotationRequest.prototype.clearGenesList = function() {
  this.setGenesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_gene_annotation_service.AnnotationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_gene_annotation_service.AnnotationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_gene_annotation_service.AnnotationResponse.displayName = 'snet_gene_annotation_service.AnnotationResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_gene_annotation_service.AnnotationResponse.prototype.toObject = function(opt_includeInstance) {
  return snet_gene_annotation_service.AnnotationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_gene_annotation_service.AnnotationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
snet_gene_annotation_service.AnnotationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    graph: msg.getGraph(),
    scm: msg.getScm()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_gene_annotation_service.AnnotationResponse}
 */
snet_gene_annotation_service.AnnotationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_gene_annotation_service.AnnotationResponse;
  return snet_gene_annotation_service.AnnotationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_gene_annotation_service.AnnotationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_gene_annotation_service.AnnotationResponse}
 */
snet_gene_annotation_service.AnnotationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGraph(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_gene_annotation_service.AnnotationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.AnnotationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_gene_annotation_service.AnnotationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_gene_annotation_service.AnnotationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGraph();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getScm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_gene_annotation_service.AnnotationResponse} The clone.
 */
snet_gene_annotation_service.AnnotationResponse.prototype.cloneMessage = function() {
  return /** @type {!snet_gene_annotation_service.AnnotationResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string graph = 1;
 * @return {string}
 */
snet_gene_annotation_service.AnnotationResponse.prototype.getGraph = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.AnnotationResponse.prototype.setGraph = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string scm = 2;
 * @return {string}
 */
snet_gene_annotation_service.AnnotationResponse.prototype.getScm = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_gene_annotation_service.AnnotationResponse.prototype.setScm = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, snet_gene_annotation_service);
