/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('match_service.descriptorByKpsRequest', null, global);
goog.exportSymbol('match_service.descriptorRequest', null, global);
goog.exportSymbol('match_service.descriptorResponse', null, global);
goog.exportSymbol('match_service.imageRetrievalRequest', null, global);
goog.exportSymbol('match_service.imageRetrievalResponse', null, global);
goog.exportSymbol('match_service.keyPoint', null, global);
goog.exportSymbol('match_service.keypointRequest', null, global);
goog.exportSymbol('match_service.keypointResponse', null, global);
goog.exportSymbol('match_service.matchedPoint', null, global);
goog.exportSymbol('match_service.matchingByImageRequest', null, global);
goog.exportSymbol('match_service.matchingByImageResponse', null, global);
goog.exportSymbol('match_service.matchingRequest', null, global);
goog.exportSymbol('match_service.matchingResponse', null, global);
goog.exportSymbol('match_service.oneDescriptor', null, global);
goog.exportSymbol('match_service.transformByImageRequest', null, global);
goog.exportSymbol('match_service.transformRequest', null, global);
goog.exportSymbol('match_service.transformResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.keyPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.keyPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.keyPoint.displayName = 'match_service.keyPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.keypointRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.keypointRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.keypointRequest.displayName = 'match_service.keypointRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.keypointResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.keypointResponse.repeatedFields_, null);
};
goog.inherits(match_service.keypointResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.keypointResponse.displayName = 'match_service.keypointResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.oneDescriptor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.oneDescriptor.repeatedFields_, null);
};
goog.inherits(match_service.oneDescriptor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.oneDescriptor.displayName = 'match_service.oneDescriptor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.descriptorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.descriptorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.descriptorRequest.displayName = 'match_service.descriptorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.descriptorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.descriptorResponse.repeatedFields_, null);
};
goog.inherits(match_service.descriptorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.descriptorResponse.displayName = 'match_service.descriptorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.matchingRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.matchingRequest.repeatedFields_, null);
};
goog.inherits(match_service.matchingRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.matchingRequest.displayName = 'match_service.matchingRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.matchedPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.matchedPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.matchedPoint.displayName = 'match_service.matchedPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.matchingResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.matchingResponse.repeatedFields_, null);
};
goog.inherits(match_service.matchingResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.matchingResponse.displayName = 'match_service.matchingResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.descriptorByKpsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.descriptorByKpsRequest.repeatedFields_, null);
};
goog.inherits(match_service.descriptorByKpsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.descriptorByKpsRequest.displayName = 'match_service.descriptorByKpsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.matchingByImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.matchingByImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.matchingByImageRequest.displayName = 'match_service.matchingByImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.matchingByImageResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.matchingByImageResponse.repeatedFields_, null);
};
goog.inherits(match_service.matchingByImageResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.matchingByImageResponse.displayName = 'match_service.matchingByImageResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.transformRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.transformRequest.repeatedFields_, null);
};
goog.inherits(match_service.transformRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.transformRequest.displayName = 'match_service.transformRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.transformResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.transformResponse.repeatedFields_, null);
};
goog.inherits(match_service.transformResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.transformResponse.displayName = 'match_service.transformResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.transformByImageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(match_service.transformByImageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.transformByImageRequest.displayName = 'match_service.transformByImageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.imageRetrievalRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.imageRetrievalRequest.repeatedFields_, null);
};
goog.inherits(match_service.imageRetrievalRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.imageRetrievalRequest.displayName = 'match_service.imageRetrievalRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
match_service.imageRetrievalResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, match_service.imageRetrievalResponse.repeatedFields_, null);
};
goog.inherits(match_service.imageRetrievalResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  match_service.imageRetrievalResponse.displayName = 'match_service.imageRetrievalResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.keyPoint.prototype.toObject = function(opt_includeInstance) {
  return match_service.keyPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.keyPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keyPoint.toObject = function(includeInstance, msg) {
  var obj = {
    size: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    angle: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    x: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    y: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    response: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    octave: jspb.Message.getFieldWithDefault(msg, 6, 0),
    classId: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.keyPoint}
 */
match_service.keyPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.keyPoint;
  return match_service.keyPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.keyPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.keyPoint}
 */
match_service.keyPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setResponse(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOctave(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClassId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.keyPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.keyPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.keyPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keyPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getAngle();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getOctave();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getClassId();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional float size = 1;
 * @return {number}
 */
match_service.keyPoint.prototype.getSize = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setSize = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float angle = 2;
 * @return {number}
 */
match_service.keyPoint.prototype.getAngle = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setAngle = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float x = 3;
 * @return {number}
 */
match_service.keyPoint.prototype.getX = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setX = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float y = 4;
 * @return {number}
 */
match_service.keyPoint.prototype.getY = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setY = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float response = 5;
 * @return {number}
 */
match_service.keyPoint.prototype.getResponse = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setResponse = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int32 octave = 6;
 * @return {number}
 */
match_service.keyPoint.prototype.getOctave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setOctave = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 class_id = 7;
 * @return {number}
 */
match_service.keyPoint.prototype.getClassId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
match_service.keyPoint.prototype.setClassId = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.keypointRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.keypointRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.keypointRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keypointRequest.toObject = function(includeInstance, msg) {
  var obj = {
    image: msg.getImage_asB64(),
    detectorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parameters: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.keypointRequest}
 */
match_service.keypointRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.keypointRequest;
  return match_service.keypointRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.keypointRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.keypointRequest}
 */
match_service.keypointRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.keypointRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.keypointRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.keypointRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keypointRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDetectorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParameters();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes image = 1;
 * @return {!(string|Uint8Array)}
 */
match_service.keypointRequest.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image = 1;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
match_service.keypointRequest.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
match_service.keypointRequest.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
match_service.keypointRequest.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string detector_name = 2;
 * @return {string}
 */
match_service.keypointRequest.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.keypointRequest.prototype.setDetectorName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string parameters = 3;
 * @return {string}
 */
match_service.keypointRequest.prototype.getParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.keypointRequest.prototype.setParameters = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.keypointResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.keypointResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.keypointResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.keypointResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keypointResponse.toObject = function(includeInstance, msg) {
  var obj = {
    keypointsList: jspb.Message.toObjectList(msg.getKeypointsList(),
    match_service.keyPoint.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uiimage: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.keypointResponse}
 */
match_service.keypointResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.keypointResponse;
  return match_service.keypointResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.keypointResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.keypointResponse}
 */
match_service.keypointResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypoints(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.keypointResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.keypointResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.keypointResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.keypointResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUiimage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated keyPoint keypoints = 1;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.keypointResponse.prototype.getKeypointsList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 1));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.keypointResponse.prototype.setKeypointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.keypointResponse.prototype.addKeypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.keypointResponse.prototype.clearKeypointsList = function() {
  this.setKeypointsList([]);
};


/**
 * optional string status = 2;
 * @return {string}
 */
match_service.keypointResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.keypointResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string UIImage = 3;
 * @return {string}
 */
match_service.keypointResponse.prototype.getUiimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.keypointResponse.prototype.setUiimage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.oneDescriptor.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.oneDescriptor.prototype.toObject = function(opt_includeInstance) {
  return match_service.oneDescriptor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.oneDescriptor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.oneDescriptor.toObject = function(includeInstance, msg) {
  var obj = {
    onedescfList: jspb.Message.getRepeatedFloatingPointField(msg, 1),
    onedescuList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.oneDescriptor}
 */
match_service.oneDescriptor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.oneDescriptor;
  return match_service.oneDescriptor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.oneDescriptor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.oneDescriptor}
 */
match_service.oneDescriptor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setOnedescfList(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setOnedescuList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.oneDescriptor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.oneDescriptor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.oneDescriptor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.oneDescriptor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOnedescfList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getOnedescuList();
  if (f.length > 0) {
    writer.writePackedInt32(
      2,
      f
    );
  }
};


/**
 * repeated float onedescF = 1;
 * @return {!Array<number>}
 */
match_service.oneDescriptor.prototype.getOnedescfList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
match_service.oneDescriptor.prototype.setOnedescfList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
match_service.oneDescriptor.prototype.addOnedescf = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.oneDescriptor.prototype.clearOnedescfList = function() {
  this.setOnedescfList([]);
};


/**
 * repeated int32 onedescU = 2;
 * @return {!Array<number>}
 */
match_service.oneDescriptor.prototype.getOnedescuList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
match_service.oneDescriptor.prototype.setOnedescuList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
match_service.oneDescriptor.prototype.addOnedescu = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.oneDescriptor.prototype.clearOnedescuList = function() {
  this.setOnedescuList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.descriptorRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.descriptorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.descriptorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorRequest.toObject = function(includeInstance, msg) {
  var obj = {
    image: msg.getImage_asB64(),
    descriptorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    descParameters: jspb.Message.getFieldWithDefault(msg, 3, ""),
    detectorName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    detParameters: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.descriptorRequest}
 */
match_service.descriptorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.descriptorRequest;
  return match_service.descriptorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.descriptorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.descriptorRequest}
 */
match_service.descriptorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescParameters(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.descriptorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.descriptorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.descriptorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDescriptorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescParameters();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDetectorName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetParameters();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bytes image = 1;
 * @return {!(string|Uint8Array)}
 */
match_service.descriptorRequest.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image = 1;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
match_service.descriptorRequest.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
match_service.descriptorRequest.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
match_service.descriptorRequest.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string descriptor_name = 2;
 * @return {string}
 */
match_service.descriptorRequest.prototype.getDescriptorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.descriptorRequest.prototype.setDescriptorName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc_parameters = 3;
 * @return {string}
 */
match_service.descriptorRequest.prototype.getDescParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.descriptorRequest.prototype.setDescParameters = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string detector_name = 4;
 * @return {string}
 */
match_service.descriptorRequest.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.descriptorRequest.prototype.setDetectorName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string det_parameters = 5;
 * @return {string}
 */
match_service.descriptorRequest.prototype.getDetParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.descriptorRequest.prototype.setDetParameters = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.descriptorResponse.repeatedFields_ = [1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.descriptorResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.descriptorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.descriptorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorResponse.toObject = function(includeInstance, msg) {
  var obj = {
    featuresList: jspb.Message.toObjectList(msg.getFeaturesList(),
    match_service.oneDescriptor.toObject, includeInstance),
    keypointsList: jspb.Message.toObjectList(msg.getKeypointsList(),
    match_service.keyPoint.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.descriptorResponse}
 */
match_service.descriptorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.descriptorResponse;
  return match_service.descriptorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.descriptorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.descriptorResponse}
 */
match_service.descriptorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.oneDescriptor;
      reader.readMessage(value,match_service.oneDescriptor.deserializeBinaryFromReader);
      msg.addFeatures(value);
      break;
    case 3:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypoints(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.descriptorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.descriptorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.descriptorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.oneDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getKeypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated oneDescriptor features = 1;
 * @return {!Array<!match_service.oneDescriptor>}
 */
match_service.descriptorResponse.prototype.getFeaturesList = function() {
  return /** @type{!Array<!match_service.oneDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.oneDescriptor, 1));
};


/** @param {!Array<!match_service.oneDescriptor>} value */
match_service.descriptorResponse.prototype.setFeaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.oneDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.oneDescriptor}
 */
match_service.descriptorResponse.prototype.addFeatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.oneDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.descriptorResponse.prototype.clearFeaturesList = function() {
  this.setFeaturesList([]);
};


/**
 * repeated keyPoint keypoints = 3;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.descriptorResponse.prototype.getKeypointsList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 3));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.descriptorResponse.prototype.setKeypointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.descriptorResponse.prototype.addKeypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.descriptorResponse.prototype.clearKeypointsList = function() {
  this.setKeypointsList([]);
};


/**
 * optional string status = 2;
 * @return {string}
 */
match_service.descriptorResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.descriptorResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.matchingRequest.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.matchingRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.matchingRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.matchingRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingRequest.toObject = function(includeInstance, msg) {
  var obj = {
    featuresFirstList: jspb.Message.toObjectList(msg.getFeaturesFirstList(),
    match_service.oneDescriptor.toObject, includeInstance),
    featuresSecondList: jspb.Message.toObjectList(msg.getFeaturesSecondList(),
    match_service.oneDescriptor.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.matchingRequest}
 */
match_service.matchingRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.matchingRequest;
  return match_service.matchingRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.matchingRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.matchingRequest}
 */
match_service.matchingRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.oneDescriptor;
      reader.readMessage(value,match_service.oneDescriptor.deserializeBinaryFromReader);
      msg.addFeaturesFirst(value);
      break;
    case 2:
      var value = new match_service.oneDescriptor;
      reader.readMessage(value,match_service.oneDescriptor.deserializeBinaryFromReader);
      msg.addFeaturesSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.matchingRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.matchingRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.matchingRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesFirstList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.oneDescriptor.serializeBinaryToWriter
    );
  }
  f = message.getFeaturesSecondList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      match_service.oneDescriptor.serializeBinaryToWriter
    );
  }
};


/**
 * repeated oneDescriptor features_first = 1;
 * @return {!Array<!match_service.oneDescriptor>}
 */
match_service.matchingRequest.prototype.getFeaturesFirstList = function() {
  return /** @type{!Array<!match_service.oneDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.oneDescriptor, 1));
};


/** @param {!Array<!match_service.oneDescriptor>} value */
match_service.matchingRequest.prototype.setFeaturesFirstList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.oneDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.oneDescriptor}
 */
match_service.matchingRequest.prototype.addFeaturesFirst = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.oneDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingRequest.prototype.clearFeaturesFirstList = function() {
  this.setFeaturesFirstList([]);
};


/**
 * repeated oneDescriptor features_second = 2;
 * @return {!Array<!match_service.oneDescriptor>}
 */
match_service.matchingRequest.prototype.getFeaturesSecondList = function() {
  return /** @type{!Array<!match_service.oneDescriptor>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.oneDescriptor, 2));
};


/** @param {!Array<!match_service.oneDescriptor>} value */
match_service.matchingRequest.prototype.setFeaturesSecondList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!match_service.oneDescriptor=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.oneDescriptor}
 */
match_service.matchingRequest.prototype.addFeaturesSecond = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, match_service.oneDescriptor, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingRequest.prototype.clearFeaturesSecondList = function() {
  this.setFeaturesSecondList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.matchedPoint.prototype.toObject = function(opt_includeInstance) {
  return match_service.matchedPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.matchedPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchedPoint.toObject = function(includeInstance, msg) {
  var obj = {
    queryidx: jspb.Message.getFieldWithDefault(msg, 1, 0),
    trainidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
    imgidx: jspb.Message.getFieldWithDefault(msg, 3, 0),
    distance: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.matchedPoint}
 */
match_service.matchedPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.matchedPoint;
  return match_service.matchedPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.matchedPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.matchedPoint}
 */
match_service.matchedPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setQueryidx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTrainidx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImgidx(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.matchedPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.matchedPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.matchedPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchedPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryidx();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTrainidx();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getImgidx();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDistance();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional int32 queryIdx = 1;
 * @return {number}
 */
match_service.matchedPoint.prototype.getQueryidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
match_service.matchedPoint.prototype.setQueryidx = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 trainIdx = 2;
 * @return {number}
 */
match_service.matchedPoint.prototype.getTrainidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
match_service.matchedPoint.prototype.setTrainidx = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 imgIdx = 3;
 * @return {number}
 */
match_service.matchedPoint.prototype.getImgidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
match_service.matchedPoint.prototype.setImgidx = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float distance = 4;
 * @return {number}
 */
match_service.matchedPoint.prototype.getDistance = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
match_service.matchedPoint.prototype.setDistance = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.matchingResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.matchingResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.matchingResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.matchingResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingResponse.toObject = function(includeInstance, msg) {
  var obj = {
    allMatchesList: jspb.Message.toObjectList(msg.getAllMatchesList(),
    match_service.matchedPoint.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.matchingResponse}
 */
match_service.matchingResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.matchingResponse;
  return match_service.matchingResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.matchingResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.matchingResponse}
 */
match_service.matchingResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.matchedPoint;
      reader.readMessage(value,match_service.matchedPoint.deserializeBinaryFromReader);
      msg.addAllMatches(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.matchingResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.matchingResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.matchingResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.matchedPoint.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated matchedPoint all_matches = 1;
 * @return {!Array<!match_service.matchedPoint>}
 */
match_service.matchingResponse.prototype.getAllMatchesList = function() {
  return /** @type{!Array<!match_service.matchedPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.matchedPoint, 1));
};


/** @param {!Array<!match_service.matchedPoint>} value */
match_service.matchingResponse.prototype.setAllMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.matchedPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.matchedPoint}
 */
match_service.matchingResponse.prototype.addAllMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.matchedPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingResponse.prototype.clearAllMatchesList = function() {
  this.setAllMatchesList([]);
};


/**
 * optional string status = 2;
 * @return {string}
 */
match_service.matchingResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.matchingResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.descriptorByKpsRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.descriptorByKpsRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.descriptorByKpsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.descriptorByKpsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorByKpsRequest.toObject = function(includeInstance, msg) {
  var obj = {
    image: msg.getImage_asB64(),
    descriptorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    descParameters: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keypointsList: jspb.Message.toObjectList(msg.getKeypointsList(),
    match_service.keyPoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.descriptorByKpsRequest}
 */
match_service.descriptorByKpsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.descriptorByKpsRequest;
  return match_service.descriptorByKpsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.descriptorByKpsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.descriptorByKpsRequest}
 */
match_service.descriptorByKpsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptorName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescParameters(value);
      break;
    case 3:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypoints(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.descriptorByKpsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.descriptorByKpsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.descriptorByKpsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.descriptorByKpsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getDescriptorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescParameters();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeypointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes image = 4;
 * @return {!(string|Uint8Array)}
 */
match_service.descriptorByKpsRequest.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes image = 4;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
match_service.descriptorByKpsRequest.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
match_service.descriptorByKpsRequest.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
match_service.descriptorByKpsRequest.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string descriptor_name = 1;
 * @return {string}
 */
match_service.descriptorByKpsRequest.prototype.getDescriptorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
match_service.descriptorByKpsRequest.prototype.setDescriptorName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string desc_parameters = 2;
 * @return {string}
 */
match_service.descriptorByKpsRequest.prototype.getDescParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.descriptorByKpsRequest.prototype.setDescParameters = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated keyPoint keypoints = 3;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.descriptorByKpsRequest.prototype.getKeypointsList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 3));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.descriptorByKpsRequest.prototype.setKeypointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.descriptorByKpsRequest.prototype.addKeypoints = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.descriptorByKpsRequest.prototype.clearKeypointsList = function() {
  this.setKeypointsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.matchingByImageRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.matchingByImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.matchingByImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingByImageRequest.toObject = function(includeInstance, msg) {
  var obj = {
    imageFirst: msg.getImageFirst_asB64(),
    imageSecond: msg.getImageSecond_asB64(),
    descriptorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    descParameters: jspb.Message.getFieldWithDefault(msg, 4, ""),
    detectorName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    detParameters: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.matchingByImageRequest}
 */
match_service.matchingByImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.matchingByImageRequest;
  return match_service.matchingByImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.matchingByImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.matchingByImageRequest}
 */
match_service.matchingByImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageFirst(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageSecond(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescParameters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.matchingByImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.matchingByImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.matchingByImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingByImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageFirst_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getImageSecond_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDescriptorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescParameters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetectorName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDetParameters();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional bytes image_first = 1;
 * @return {!(string|Uint8Array)}
 */
match_service.matchingByImageRequest.prototype.getImageFirst = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image_first = 1;
 * This is a type-conversion wrapper around `getImageFirst()`
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getImageFirst_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageFirst()));
};


/**
 * optional bytes image_first = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageFirst()`
 * @return {!Uint8Array}
 */
match_service.matchingByImageRequest.prototype.getImageFirst_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageFirst()));
};


/** @param {!(string|Uint8Array)} value */
match_service.matchingByImageRequest.prototype.setImageFirst = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes image_second = 2;
 * @return {!(string|Uint8Array)}
 */
match_service.matchingByImageRequest.prototype.getImageSecond = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image_second = 2;
 * This is a type-conversion wrapper around `getImageSecond()`
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getImageSecond_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageSecond()));
};


/**
 * optional bytes image_second = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageSecond()`
 * @return {!Uint8Array}
 */
match_service.matchingByImageRequest.prototype.getImageSecond_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageSecond()));
};


/** @param {!(string|Uint8Array)} value */
match_service.matchingByImageRequest.prototype.setImageSecond = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string descriptor_name = 3;
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getDescriptorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.matchingByImageRequest.prototype.setDescriptorName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string desc_parameters = 4;
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getDescParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.matchingByImageRequest.prototype.setDescParameters = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string detector_name = 5;
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.matchingByImageRequest.prototype.setDetectorName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string det_parameters = 6;
 * @return {string}
 */
match_service.matchingByImageRequest.prototype.getDetParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
match_service.matchingByImageRequest.prototype.setDetParameters = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.matchingByImageResponse.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.matchingByImageResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.matchingByImageResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.matchingByImageResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingByImageResponse.toObject = function(includeInstance, msg) {
  var obj = {
    allMatchesList: jspb.Message.toObjectList(msg.getAllMatchesList(),
    match_service.matchedPoint.toObject, includeInstance),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keypointsFirstList: jspb.Message.toObjectList(msg.getKeypointsFirstList(),
    match_service.keyPoint.toObject, includeInstance),
    keypointsSecondList: jspb.Message.toObjectList(msg.getKeypointsSecondList(),
    match_service.keyPoint.toObject, includeInstance),
    uiimage: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.matchingByImageResponse}
 */
match_service.matchingByImageResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.matchingByImageResponse;
  return match_service.matchingByImageResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.matchingByImageResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.matchingByImageResponse}
 */
match_service.matchingByImageResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.matchedPoint;
      reader.readMessage(value,match_service.matchedPoint.deserializeBinaryFromReader);
      msg.addAllMatches(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypointsFirst(value);
      break;
    case 4:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypointsSecond(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.matchingByImageResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.matchingByImageResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.matchingByImageResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.matchingByImageResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.matchedPoint.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeypointsFirstList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getKeypointsSecondList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getUiimage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated matchedPoint all_matches = 1;
 * @return {!Array<!match_service.matchedPoint>}
 */
match_service.matchingByImageResponse.prototype.getAllMatchesList = function() {
  return /** @type{!Array<!match_service.matchedPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.matchedPoint, 1));
};


/** @param {!Array<!match_service.matchedPoint>} value */
match_service.matchingByImageResponse.prototype.setAllMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.matchedPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.matchedPoint}
 */
match_service.matchingByImageResponse.prototype.addAllMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.matchedPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingByImageResponse.prototype.clearAllMatchesList = function() {
  this.setAllMatchesList([]);
};


/**
 * optional string status = 2;
 * @return {string}
 */
match_service.matchingByImageResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.matchingByImageResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated keyPoint keypoints_first = 3;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.matchingByImageResponse.prototype.getKeypointsFirstList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 3));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.matchingByImageResponse.prototype.setKeypointsFirstList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.matchingByImageResponse.prototype.addKeypointsFirst = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingByImageResponse.prototype.clearKeypointsFirstList = function() {
  this.setKeypointsFirstList([]);
};


/**
 * repeated keyPoint keypoints_second = 4;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.matchingByImageResponse.prototype.getKeypointsSecondList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 4));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.matchingByImageResponse.prototype.setKeypointsSecondList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.matchingByImageResponse.prototype.addKeypointsSecond = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.matchingByImageResponse.prototype.clearKeypointsSecondList = function() {
  this.setKeypointsSecondList([]);
};


/**
 * optional string UIImage = 5;
 * @return {string}
 */
match_service.matchingByImageResponse.prototype.getUiimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.matchingByImageResponse.prototype.setUiimage = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.transformRequest.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.transformRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.transformRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.transformRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformRequest.toObject = function(includeInstance, msg) {
  var obj = {
    allMatchesList: jspb.Message.toObjectList(msg.getAllMatchesList(),
    match_service.matchedPoint.toObject, includeInstance),
    transformType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    keypointsFirstList: jspb.Message.toObjectList(msg.getKeypointsFirstList(),
    match_service.keyPoint.toObject, includeInstance),
    keypointsSecondList: jspb.Message.toObjectList(msg.getKeypointsSecondList(),
    match_service.keyPoint.toObject, includeInstance),
    transformInputParameters: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.transformRequest}
 */
match_service.transformRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.transformRequest;
  return match_service.transformRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.transformRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.transformRequest}
 */
match_service.transformRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new match_service.matchedPoint;
      reader.readMessage(value,match_service.matchedPoint.deserializeBinaryFromReader);
      msg.addAllMatches(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransformType(value);
      break;
    case 3:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypointsFirst(value);
      break;
    case 4:
      var value = new match_service.keyPoint;
      reader.readMessage(value,match_service.keyPoint.deserializeBinaryFromReader);
      msg.addKeypointsSecond(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransformInputParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.transformRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.transformRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.transformRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAllMatchesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      match_service.matchedPoint.serializeBinaryToWriter
    );
  }
  f = message.getTransformType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getKeypointsFirstList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getKeypointsSecondList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      match_service.keyPoint.serializeBinaryToWriter
    );
  }
  f = message.getTransformInputParameters();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated matchedPoint all_matches = 1;
 * @return {!Array<!match_service.matchedPoint>}
 */
match_service.transformRequest.prototype.getAllMatchesList = function() {
  return /** @type{!Array<!match_service.matchedPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.matchedPoint, 1));
};


/** @param {!Array<!match_service.matchedPoint>} value */
match_service.transformRequest.prototype.setAllMatchesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!match_service.matchedPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.matchedPoint}
 */
match_service.transformRequest.prototype.addAllMatches = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, match_service.matchedPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.transformRequest.prototype.clearAllMatchesList = function() {
  this.setAllMatchesList([]);
};


/**
 * optional string transform_type = 2;
 * @return {string}
 */
match_service.transformRequest.prototype.getTransformType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
match_service.transformRequest.prototype.setTransformType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated keyPoint keypoints_first = 3;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.transformRequest.prototype.getKeypointsFirstList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 3));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.transformRequest.prototype.setKeypointsFirstList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.transformRequest.prototype.addKeypointsFirst = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.transformRequest.prototype.clearKeypointsFirstList = function() {
  this.setKeypointsFirstList([]);
};


/**
 * repeated keyPoint keypoints_second = 4;
 * @return {!Array<!match_service.keyPoint>}
 */
match_service.transformRequest.prototype.getKeypointsSecondList = function() {
  return /** @type{!Array<!match_service.keyPoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, match_service.keyPoint, 4));
};


/** @param {!Array<!match_service.keyPoint>} value */
match_service.transformRequest.prototype.setKeypointsSecondList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!match_service.keyPoint=} opt_value
 * @param {number=} opt_index
 * @return {!match_service.keyPoint}
 */
match_service.transformRequest.prototype.addKeypointsSecond = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, match_service.keyPoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.transformRequest.prototype.clearKeypointsSecondList = function() {
  this.setKeypointsSecondList([]);
};


/**
 * optional string transform_input_parameters = 5;
 * @return {string}
 */
match_service.transformRequest.prototype.getTransformInputParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.transformRequest.prototype.setTransformInputParameters = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.transformResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.transformResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.transformResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.transformResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformResponse.toObject = function(includeInstance, msg) {
  var obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    transformParametersList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    resultimage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uiimage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.transformResponse}
 */
match_service.transformResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.transformResponse;
  return match_service.transformResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.transformResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.transformResponse}
 */
match_service.transformResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setTransformParametersList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultimage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.transformResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.transformResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.transformResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTransformParametersList();
  if (f.length > 0) {
    writer.writePackedDouble(
      2,
      f
    );
  }
  f = message.getResultimage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUiimage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
match_service.transformResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
match_service.transformResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated double transform_parameters = 2;
 * @return {!Array<number>}
 */
match_service.transformResponse.prototype.getTransformParametersList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
match_service.transformResponse.prototype.setTransformParametersList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
match_service.transformResponse.prototype.addTransformParameters = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.transformResponse.prototype.clearTransformParametersList = function() {
  this.setTransformParametersList([]);
};


/**
 * optional string resultImage = 3;
 * @return {string}
 */
match_service.transformResponse.prototype.getResultimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.transformResponse.prototype.setResultimage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UIImage = 4;
 * @return {string}
 */
match_service.transformResponse.prototype.getUiimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.transformResponse.prototype.setUiimage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.transformByImageRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.transformByImageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.transformByImageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformByImageRequest.toObject = function(includeInstance, msg) {
  var obj = {
    imageFirst: msg.getImageFirst_asB64(),
    imageSecond: msg.getImageSecond_asB64(),
    descriptorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    descParameters: jspb.Message.getFieldWithDefault(msg, 4, ""),
    detectorName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    detParameters: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transformType: jspb.Message.getFieldWithDefault(msg, 7, ""),
    transformInputParameters: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.transformByImageRequest}
 */
match_service.transformByImageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.transformByImageRequest;
  return match_service.transformByImageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.transformByImageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.transformByImageRequest}
 */
match_service.transformByImageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageFirst(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageSecond(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescParameters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetParameters(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransformType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransformInputParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.transformByImageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.transformByImageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.transformByImageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.transformByImageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageFirst_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getImageSecond_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDescriptorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescParameters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetectorName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDetParameters();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransformType();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTransformInputParameters();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional bytes image_first = 1;
 * @return {!(string|Uint8Array)}
 */
match_service.transformByImageRequest.prototype.getImageFirst = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image_first = 1;
 * This is a type-conversion wrapper around `getImageFirst()`
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getImageFirst_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageFirst()));
};


/**
 * optional bytes image_first = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageFirst()`
 * @return {!Uint8Array}
 */
match_service.transformByImageRequest.prototype.getImageFirst_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageFirst()));
};


/** @param {!(string|Uint8Array)} value */
match_service.transformByImageRequest.prototype.setImageFirst = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes image_second = 2;
 * @return {!(string|Uint8Array)}
 */
match_service.transformByImageRequest.prototype.getImageSecond = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image_second = 2;
 * This is a type-conversion wrapper around `getImageSecond()`
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getImageSecond_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageSecond()));
};


/**
 * optional bytes image_second = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageSecond()`
 * @return {!Uint8Array}
 */
match_service.transformByImageRequest.prototype.getImageSecond_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageSecond()));
};


/** @param {!(string|Uint8Array)} value */
match_service.transformByImageRequest.prototype.setImageSecond = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string descriptor_name = 3;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getDescriptorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setDescriptorName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string desc_parameters = 4;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getDescParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setDescParameters = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string detector_name = 5;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setDetectorName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string det_parameters = 6;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getDetParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setDetParameters = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string transform_type = 7;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getTransformType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setTransformType = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string transform_input_parameters = 8;
 * @return {string}
 */
match_service.transformByImageRequest.prototype.getTransformInputParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
match_service.transformByImageRequest.prototype.setTransformInputParameters = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.imageRetrievalRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.imageRetrievalRequest.prototype.toObject = function(opt_includeInstance) {
  return match_service.imageRetrievalRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.imageRetrievalRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.imageRetrievalRequest.toObject = function(includeInstance, msg) {
  var obj = {
    inputImage: msg.getInputImage_asB64(),
    imageBaseList: msg.getImageBaseList_asB64(),
    descriptorName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    descParameters: jspb.Message.getFieldWithDefault(msg, 4, ""),
    detectorName: jspb.Message.getFieldWithDefault(msg, 5, ""),
    detParameters: jspb.Message.getFieldWithDefault(msg, 6, ""),
    numofimagestoretrieve: jspb.Message.getFieldWithDefault(msg, 7, 0),
    numofclusters: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.imageRetrievalRequest}
 */
match_service.imageRetrievalRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.imageRetrievalRequest;
  return match_service.imageRetrievalRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.imageRetrievalRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.imageRetrievalRequest}
 */
match_service.imageRetrievalRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInputImage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addImageBase(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescriptorName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescParameters(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetectorName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDetParameters(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumofimagestoretrieve(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumofclusters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.imageRetrievalRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.imageRetrievalRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.imageRetrievalRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.imageRetrievalRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInputImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getImageBaseList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getDescriptorName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescParameters();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDetectorName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDetParameters();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getNumofimagestoretrieve();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getNumofclusters();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional bytes input_image = 1;
 * @return {!(string|Uint8Array)}
 */
match_service.imageRetrievalRequest.prototype.getInputImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes input_image = 1;
 * This is a type-conversion wrapper around `getInputImage()`
 * @return {string}
 */
match_service.imageRetrievalRequest.prototype.getInputImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInputImage()));
};


/**
 * optional bytes input_image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputImage()`
 * @return {!Uint8Array}
 */
match_service.imageRetrievalRequest.prototype.getInputImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInputImage()));
};


/** @param {!(string|Uint8Array)} value */
match_service.imageRetrievalRequest.prototype.setInputImage = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes image_base = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
match_service.imageRetrievalRequest.prototype.getImageBaseList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes image_base = 2;
 * This is a type-conversion wrapper around `getImageBaseList()`
 * @return {!Array<string>}
 */
match_service.imageRetrievalRequest.prototype.getImageBaseList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getImageBaseList()));
};


/**
 * repeated bytes image_base = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageBaseList()`
 * @return {!Array<!Uint8Array>}
 */
match_service.imageRetrievalRequest.prototype.getImageBaseList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getImageBaseList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
match_service.imageRetrievalRequest.prototype.setImageBaseList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
match_service.imageRetrievalRequest.prototype.addImageBase = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.imageRetrievalRequest.prototype.clearImageBaseList = function() {
  this.setImageBaseList([]);
};


/**
 * optional string descriptor_name = 3;
 * @return {string}
 */
match_service.imageRetrievalRequest.prototype.getDescriptorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.imageRetrievalRequest.prototype.setDescriptorName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string desc_parameters = 4;
 * @return {string}
 */
match_service.imageRetrievalRequest.prototype.getDescParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.imageRetrievalRequest.prototype.setDescParameters = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string detector_name = 5;
 * @return {string}
 */
match_service.imageRetrievalRequest.prototype.getDetectorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
match_service.imageRetrievalRequest.prototype.setDetectorName = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string det_parameters = 6;
 * @return {string}
 */
match_service.imageRetrievalRequest.prototype.getDetParameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
match_service.imageRetrievalRequest.prototype.setDetParameters = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 numOfImagesToRetrieve = 7;
 * @return {number}
 */
match_service.imageRetrievalRequest.prototype.getNumofimagestoretrieve = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
match_service.imageRetrievalRequest.prototype.setNumofimagestoretrieve = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 numOfClusters = 8;
 * @return {number}
 */
match_service.imageRetrievalRequest.prototype.getNumofclusters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
match_service.imageRetrievalRequest.prototype.setNumofclusters = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
match_service.imageRetrievalResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
match_service.imageRetrievalResponse.prototype.toObject = function(opt_includeInstance) {
  return match_service.imageRetrievalResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!match_service.imageRetrievalResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.imageRetrievalResponse.toObject = function(includeInstance, msg) {
  var obj = {
    imagesList: msg.getImagesList_asB64(),
    distancesList: jspb.Message.getRepeatedFloatingPointField(msg, 2),
    status: jspb.Message.getFieldWithDefault(msg, 3, ""),
    uiimage: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!match_service.imageRetrievalResponse}
 */
match_service.imageRetrievalResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new match_service.imageRetrievalResponse;
  return match_service.imageRetrievalResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!match_service.imageRetrievalResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!match_service.imageRetrievalResponse}
 */
match_service.imageRetrievalResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addImages(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setDistancesList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUiimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
match_service.imageRetrievalResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  match_service.imageRetrievalResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!match_service.imageRetrievalResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
match_service.imageRetrievalResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImagesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getDistancesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUiimage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * repeated bytes images = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
match_service.imageRetrievalResponse.prototype.getImagesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes images = 1;
 * This is a type-conversion wrapper around `getImagesList()`
 * @return {!Array<string>}
 */
match_service.imageRetrievalResponse.prototype.getImagesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getImagesList()));
};


/**
 * repeated bytes images = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImagesList()`
 * @return {!Array<!Uint8Array>}
 */
match_service.imageRetrievalResponse.prototype.getImagesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getImagesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
match_service.imageRetrievalResponse.prototype.setImagesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
match_service.imageRetrievalResponse.prototype.addImages = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.imageRetrievalResponse.prototype.clearImagesList = function() {
  this.setImagesList([]);
};


/**
 * repeated float distances = 2;
 * @return {!Array<number>}
 */
match_service.imageRetrievalResponse.prototype.getDistancesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/** @param {!Array<number>} value */
match_service.imageRetrievalResponse.prototype.setDistancesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
match_service.imageRetrievalResponse.prototype.addDistances = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
match_service.imageRetrievalResponse.prototype.clearDistancesList = function() {
  this.setDistancesList([]);
};


/**
 * optional string status = 3;
 * @return {string}
 */
match_service.imageRetrievalResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
match_service.imageRetrievalResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string UIImage = 4;
 * @return {string}
 */
match_service.imageRetrievalResponse.prototype.getUiimage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
match_service.imageRetrievalResponse.prototype.setUiimage = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, match_service);
