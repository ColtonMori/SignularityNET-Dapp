/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable*/
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_face_align.BoundingBox', null, global);
goog.exportSymbol('snet_face_align.FaceDetections', null, global);
goog.exportSymbol('snet_face_align.FaceLandmarkDescriptions', null, global);
goog.exportSymbol('snet_face_align.FaceLandmarkModels', null, global);
goog.exportSymbol('snet_face_align.FaceLandmarks', null, global);
goog.exportSymbol('snet_face_align.ImageRGB', null, global);
goog.exportSymbol('snet_face_align.Point2D', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.ImageRGB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_face_align.ImageRGB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.ImageRGB.displayName = 'snet_face_align.ImageRGB';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.ImageRGB.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.ImageRGB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.ImageRGB} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.ImageRGB.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.ImageRGB}
 */
snet_face_align.ImageRGB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.ImageRGB;
  return snet_face_align.ImageRGB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.ImageRGB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.ImageRGB}
 */
snet_face_align.ImageRGB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.ImageRGB} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.ImageRGB.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.ImageRGB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.ImageRGB.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.ImageRGB} The clone.
 */
snet_face_align.ImageRGB.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.ImageRGB} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes content = 1;
 * @return {!(string|Uint8Array)}
 */
snet_face_align.ImageRGB.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes content = 1;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
snet_face_align.ImageRGB.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * optional bytes content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
snet_face_align.ImageRGB.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/** @param {!(string|Uint8Array)} value  */
snet_face_align.ImageRGB.prototype.setContent = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.BoundingBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_face_align.BoundingBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.BoundingBox.displayName = 'snet_face_align.BoundingBox';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.BoundingBox.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.BoundingBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.BoundingBox} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.BoundingBox.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: msg.getX(),
    y: msg.getY(),
    w: msg.getW(),
    h: msg.getH()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.BoundingBox}
 */
snet_face_align.BoundingBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.BoundingBox;
  return snet_face_align.BoundingBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.BoundingBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.BoundingBox}
 */
snet_face_align.BoundingBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setW(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setH(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.BoundingBox} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.BoundingBox.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.BoundingBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.BoundingBox.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = this.getW();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getH();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.BoundingBox} The clone.
 */
snet_face_align.BoundingBox.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.BoundingBox} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
snet_face_align.BoundingBox.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
snet_face_align.BoundingBox.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
snet_face_align.BoundingBox.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_face_align.BoundingBox.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 w = 3;
 * @return {number}
 */
snet_face_align.BoundingBox.prototype.getW = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
snet_face_align.BoundingBox.prototype.setW = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int32 h = 4;
 * @return {number}
 */
snet_face_align.BoundingBox.prototype.getH = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
snet_face_align.BoundingBox.prototype.setH = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.Point2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_face_align.Point2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.Point2D.displayName = 'snet_face_align.Point2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.Point2D.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.Point2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.Point2D} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.Point2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: msg.getX(),
    y: msg.getY()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.Point2D}
 */
snet_face_align.Point2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.Point2D;
  return snet_face_align.Point2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.Point2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.Point2D}
 */
snet_face_align.Point2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.Point2D} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.Point2D.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.Point2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.Point2D.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.Point2D} The clone.
 */
snet_face_align.Point2D.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.Point2D} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
snet_face_align.Point2D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
snet_face_align.Point2D.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
snet_face_align.Point2D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_face_align.Point2D.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceDetections = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceDetections.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceDetections, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceDetections.displayName = 'snet_face_align.FaceDetections';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceDetections.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceDetections.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceDetections.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceDetections} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceDetections.toObject = function(includeInstance, msg) {
  var f, obj = {
    faceBboxList: jspb.Message.toObjectList(msg.getFaceBboxList(),
    snet_face_align.BoundingBox.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceDetections}
 */
snet_face_align.FaceDetections.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceDetections;
  return snet_face_align.FaceDetections.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceDetections} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceDetections}
 */
snet_face_align.FaceDetections.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_face_align.BoundingBox;
      reader.readMessage(value,snet_face_align.BoundingBox.deserializeBinaryFromReader);
      msg.getFaceBboxList().push(value);
      msg.setFaceBboxList(msg.getFaceBboxList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceDetections} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceDetections.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceDetections.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceDetections.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFaceBboxList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      snet_face_align.BoundingBox.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceDetections} The clone.
 */
snet_face_align.FaceDetections.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceDetections} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated BoundingBox face_bbox = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.BoundingBox>}
 */
snet_face_align.FaceDetections.prototype.getFaceBboxList = function() {
  return /** @type{!Array.<!snet_face_align.BoundingBox>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_face_align.BoundingBox, 1));
};


/** @param {Array.<!snet_face_align.BoundingBox>} value  */
snet_face_align.FaceDetections.prototype.setFaceBboxList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_face_align.FaceDetections.prototype.clearFaceBboxList = function() {
  this.setFaceBboxList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceLandmarks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceLandmarks.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceLandmarks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceLandmarks.displayName = 'snet_face_align.FaceLandmarks';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceLandmarks.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceLandmarks.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceLandmarks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceLandmarks} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceLandmarks.toObject = function(includeInstance, msg) {
  var f, obj = {
    landmarkModel: msg.getLandmarkModel(),
    pointList: jspb.Message.toObjectList(msg.getPointList(),
    snet_face_align.Point2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceLandmarks}
 */
snet_face_align.FaceLandmarks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceLandmarks;
  return snet_face_align.FaceLandmarks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceLandmarks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceLandmarks}
 */
snet_face_align.FaceLandmarks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandmarkModel(value);
      break;
    case 2:
      var value = new snet_face_align.Point2D;
      reader.readMessage(value,snet_face_align.Point2D.deserializeBinaryFromReader);
      msg.getPointList().push(value);
      msg.setPointList(msg.getPointList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceLandmarks} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarks.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceLandmarks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarks.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLandmarkModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_face_align.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceLandmarks} The clone.
 */
snet_face_align.FaceLandmarks.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceLandmarks} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string landmark_model = 1;
 * @return {string}
 */
snet_face_align.FaceLandmarks.prototype.getLandmarkModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_face_align.FaceLandmarks.prototype.setLandmarkModel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Point2D point = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.Point2D>}
 */
snet_face_align.FaceLandmarks.prototype.getPointList = function() {
  return /** @type{!Array.<!snet_face_align.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_face_align.Point2D, 2));
};


/** @param {Array.<!snet_face_align.Point2D>} value  */
snet_face_align.FaceLandmarks.prototype.setPointList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_face_align.FaceLandmarks.prototype.clearPointList = function() {
  this.setPointList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceLandmarkDescriptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceLandmarkDescriptions.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceLandmarkDescriptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceLandmarkDescriptions.displayName = 'snet_face_align.FaceLandmarkDescriptions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceLandmarkDescriptions.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceLandmarkDescriptions.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceLandmarkDescriptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceLandmarkDescriptions} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceLandmarkDescriptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    landmarkModel: msg.getLandmarkModel(),
    landmarkDescriptionList: jspb.Message.getField(msg, 2),
    landmarkAvgList: jspb.Message.toObjectList(msg.getLandmarkAvgList(),
    snet_face_align.Point2D.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceLandmarkDescriptions}
 */
snet_face_align.FaceLandmarkDescriptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceLandmarkDescriptions;
  return snet_face_align.FaceLandmarkDescriptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceLandmarkDescriptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceLandmarkDescriptions}
 */
snet_face_align.FaceLandmarkDescriptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLandmarkModel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getLandmarkDescriptionList().push(value);
      msg.setLandmarkDescriptionList(msg.getLandmarkDescriptionList());
      break;
    case 3:
      var value = new snet_face_align.Point2D;
      reader.readMessage(value,snet_face_align.Point2D.deserializeBinaryFromReader);
      msg.getLandmarkAvgList().push(value);
      msg.setLandmarkAvgList(msg.getLandmarkAvgList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceLandmarkDescriptions} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarkDescriptions.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceLandmarkDescriptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarkDescriptions.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLandmarkModel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLandmarkDescriptionList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getLandmarkAvgList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      snet_face_align.Point2D.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceLandmarkDescriptions} The clone.
 */
snet_face_align.FaceLandmarkDescriptions.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceLandmarkDescriptions} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string landmark_model = 1;
 * @return {string}
 */
snet_face_align.FaceLandmarkDescriptions.prototype.getLandmarkModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_face_align.FaceLandmarkDescriptions.prototype.setLandmarkModel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated string landmark_description = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_face_align.FaceLandmarkDescriptions.prototype.getLandmarkDescriptionList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
snet_face_align.FaceLandmarkDescriptions.prototype.setLandmarkDescriptionList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


snet_face_align.FaceLandmarkDescriptions.prototype.clearLandmarkDescriptionList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * repeated Point2D landmark_avg = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.Point2D>}
 */
snet_face_align.FaceLandmarkDescriptions.prototype.getLandmarkAvgList = function() {
  return /** @type{!Array.<!snet_face_align.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_face_align.Point2D, 3));
};


/** @param {Array.<!snet_face_align.Point2D>} value  */
snet_face_align.FaceLandmarkDescriptions.prototype.setLandmarkAvgList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


snet_face_align.FaceLandmarkDescriptions.prototype.clearLandmarkAvgList = function() {
  this.setLandmarkAvgList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_face_align.FaceLandmarkModels = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_face_align.FaceLandmarkModels.repeatedFields_, null);
};
goog.inherits(snet_face_align.FaceLandmarkModels, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_face_align.FaceLandmarkModels.displayName = 'snet_face_align.FaceLandmarkModels';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_face_align.FaceLandmarkModels.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_face_align.FaceLandmarkModels.prototype.toObject = function(opt_includeInstance) {
  return snet_face_align.FaceLandmarkModels.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_face_align.FaceLandmarkModels} msg The msg instance to transform.
 * @return {!Object}
 */
snet_face_align.FaceLandmarkModels.toObject = function(includeInstance, msg) {
  var f, obj = {
    modelList: jspb.Message.toObjectList(msg.getModelList(),
    snet_face_align.FaceLandmarkDescriptions.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_face_align.FaceLandmarkModels}
 */
snet_face_align.FaceLandmarkModels.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_face_align.FaceLandmarkModels;
  return snet_face_align.FaceLandmarkModels.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_face_align.FaceLandmarkModels} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_face_align.FaceLandmarkModels}
 */
snet_face_align.FaceLandmarkModels.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_face_align.FaceLandmarkDescriptions;
      reader.readMessage(value,snet_face_align.FaceLandmarkDescriptions.deserializeBinaryFromReader);
      msg.getModelList().push(value);
      msg.setModelList(msg.getModelList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_face_align.FaceLandmarkModels} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarkModels.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_face_align.FaceLandmarkModels.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_face_align.FaceLandmarkModels.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getModelList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      snet_face_align.FaceLandmarkDescriptions.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_face_align.FaceLandmarkModels} The clone.
 */
snet_face_align.FaceLandmarkModels.prototype.cloneMessage = function() {
  return /** @type {!snet_face_align.FaceLandmarkModels} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated FaceLandmarkDescriptions model = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_face_align.FaceLandmarkDescriptions>}
 */
snet_face_align.FaceLandmarkModels.prototype.getModelList = function() {
  return /** @type{!Array.<!snet_face_align.FaceLandmarkDescriptions>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_face_align.FaceLandmarkDescriptions, 1));
};


/** @param {Array.<!snet_face_align.FaceLandmarkDescriptions>} value  */
snet_face_align.FaceLandmarkModels.prototype.setModelList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_face_align.FaceLandmarkModels.prototype.clearModelList = function() {
  this.setModelList([]);
};


goog.object.extend(exports, snet_face_align);
