/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('minecraftizing_service_snet.minecraftRequest', null, global);
goog.exportSymbol('minecraftizing_service_snet.minecraftResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
minecraftizing_service_snet.minecraftRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(minecraftizing_service_snet.minecraftRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  minecraftizing_service_snet.minecraftRequest.displayName = 'minecraftizing_service_snet.minecraftRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
minecraftizing_service_snet.minecraftResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(minecraftizing_service_snet.minecraftResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  minecraftizing_service_snet.minecraftResponse.displayName = 'minecraftizing_service_snet.minecraftResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
minecraftizing_service_snet.minecraftRequest.prototype.toObject = function(opt_includeInstance) {
  return minecraftizing_service_snet.minecraftRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!minecraftizing_service_snet.minecraftRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
minecraftizing_service_snet.minecraftRequest.toObject = function(includeInstance, msg) {
  var obj = {
    networkName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataset: jspb.Message.getFieldWithDefault(msg, 2, ""),
    inputImage: msg.getInputImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!minecraftizing_service_snet.minecraftRequest}
 */
minecraftizing_service_snet.minecraftRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new minecraftizing_service_snet.minecraftRequest;
  return minecraftizing_service_snet.minecraftRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!minecraftizing_service_snet.minecraftRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!minecraftizing_service_snet.minecraftRequest}
 */
minecraftizing_service_snet.minecraftRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataset(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setInputImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
minecraftizing_service_snet.minecraftRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  minecraftizing_service_snet.minecraftRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!minecraftizing_service_snet.minecraftRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
minecraftizing_service_snet.minecraftRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNetworkName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataset();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInputImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string network_name = 1;
 * @return {string}
 */
minecraftizing_service_snet.minecraftRequest.prototype.getNetworkName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
minecraftizing_service_snet.minecraftRequest.prototype.setNetworkName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dataset = 2;
 * @return {string}
 */
minecraftizing_service_snet.minecraftRequest.prototype.getDataset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
minecraftizing_service_snet.minecraftRequest.prototype.setDataset = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes input_image = 3;
 * @return {!(string|Uint8Array)}
 */
minecraftizing_service_snet.minecraftRequest.prototype.getInputImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes input_image = 3;
 * This is a type-conversion wrapper around `getInputImage()`
 * @return {string}
 */
minecraftizing_service_snet.minecraftRequest.prototype.getInputImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getInputImage()));
};


/**
 * optional bytes input_image = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInputImage()`
 * @return {!Uint8Array}
 */
minecraftizing_service_snet.minecraftRequest.prototype.getInputImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getInputImage()));
};


/** @param {!(string|Uint8Array)} value */
minecraftizing_service_snet.minecraftRequest.prototype.setInputImage = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
minecraftizing_service_snet.minecraftResponse.prototype.toObject = function(opt_includeInstance) {
  return minecraftizing_service_snet.minecraftResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!minecraftizing_service_snet.minecraftResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
minecraftizing_service_snet.minecraftResponse.toObject = function(includeInstance, msg) {
  var obj = {
    output: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    dType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    width: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nChannels: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!minecraftizing_service_snet.minecraftResponse}
 */
minecraftizing_service_snet.minecraftResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new minecraftizing_service_snet.minecraftResponse;
  return minecraftizing_service_snet.minecraftResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!minecraftizing_service_snet.minecraftResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!minecraftizing_service_snet.minecraftResponse}
 */
minecraftizing_service_snet.minecraftResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNChannels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
minecraftizing_service_snet.minecraftResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  minecraftizing_service_snet.minecraftResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!minecraftizing_service_snet.minecraftResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
minecraftizing_service_snet.minecraftResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getNChannels();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional string output = 1;
 * @return {string}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
minecraftizing_service_snet.minecraftResponse.prototype.setOutput = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
minecraftizing_service_snet.minecraftResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string d_type = 3;
 * @return {string}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getDType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
minecraftizing_service_snet.minecraftResponse.prototype.setDType = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 height = 4;
 * @return {number}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
minecraftizing_service_snet.minecraftResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 width = 5;
 * @return {number}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
minecraftizing_service_snet.minecraftResponse.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 n_channels = 6;
 * @return {number}
 */
minecraftizing_service_snet.minecraftResponse.prototype.getNChannels = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
minecraftizing_service_snet.minecraftResponse.prototype.setNChannels = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


goog.object.extend(exports, minecraftizing_service_snet);
