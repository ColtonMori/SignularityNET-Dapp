/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable*/

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_network_analytics_bipartite.BipartiteGraph', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.BipartiteGraphResponse', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.BipartiteNodes', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.Edge', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.Graph', null, global);
goog.exportSymbol('BipartiteGraphRequestsnet_network_analytics_bipartite.ProjecetedGraphRequest', null, global);
goog.exportSymbol('snet_network_analytics_bipartite.ProjecetedGraphResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.Edge = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.Edge.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.Edge, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.Edge.displayName = 'snet_network_analytics_bipartite.Edge';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.Edge.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.Edge.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.Edge.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.Edge} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.Edge.toObject = function(includeInstance, msg) {
  var f, obj = {
    edgeList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.Edge}
 */
snet_network_analytics_bipartite.Edge.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.Edge;
  return snet_network_analytics_bipartite.Edge.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.Edge} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.Edge}
 */
snet_network_analytics_bipartite.Edge.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getEdgeList().push(value);
      msg.setEdgeList(msg.getEdgeList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.Edge} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.Edge.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.Edge.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.Edge.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEdgeList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.Edge} The clone.
 */
snet_network_analytics_bipartite.Edge.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.Edge} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string edge = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.Edge.prototype.getEdgeList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.Edge.prototype.setEdgeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_network_analytics_bipartite.Edge.prototype.clearEdgeList = function() {
  jspb.Message.setField(this, 1, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.Graph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.Graph.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.Graph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.Graph.displayName = 'snet_network_analytics_bipartite.Graph';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.Graph.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.Graph.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.Graph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.Graph} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.Graph.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.getField(msg, 1),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    snet_network_analytics_bipartite.Edge.toObject, includeInstance),
    weightsList: jspb.Message.getRepeatedFloatingPointField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.Graph}
 */
snet_network_analytics_bipartite.Graph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.Graph;
  return snet_network_analytics_bipartite.Graph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.Graph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.Graph}
 */
snet_network_analytics_bipartite.Graph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getNodesList().push(value);
      msg.setNodesList(msg.getNodesList());
      break;
    case 2:
      var value = new snet_network_analytics_bipartite.Edge;
      reader.readMessage(value,snet_network_analytics_bipartite.Edge.deserializeBinaryFromReader);
      msg.getEdgesList().push(value);
      msg.setEdgesList(msg.getEdgesList());
      break;
    case 3:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setWeightsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.Graph} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.Graph.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.Graph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.Graph.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_network_analytics_bipartite.Edge.serializeBinaryToWriter
    );
  }
  f = this.getWeightsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.Graph} The clone.
 */
snet_network_analytics_bipartite.Graph.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.Graph} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string nodes = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.Graph.prototype.getNodesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.Graph.prototype.setNodesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_network_analytics_bipartite.Graph.prototype.clearNodesList = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated Edge edges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_network_analytics_bipartite.Edge>}
 */
snet_network_analytics_bipartite.Graph.prototype.getEdgesList = function() {
  return /** @type{!Array.<!snet_network_analytics_bipartite.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_network_analytics_bipartite.Edge, 2));
};


/** @param {Array.<!snet_network_analytics_bipartite.Edge>} value  */
snet_network_analytics_bipartite.Graph.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_network_analytics_bipartite.Graph.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * repeated double weights = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
snet_network_analytics_bipartite.Graph.prototype.getWeightsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 3));
};


/** @param {Array.<number>} value  */
snet_network_analytics_bipartite.Graph.prototype.setWeightsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


snet_network_analytics_bipartite.Graph.prototype.clearWeightsList = function() {
  jspb.Message.setField(this, 3, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.BipartiteNodes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.BipartiteNodes.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.BipartiteNodes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.BipartiteNodes.displayName = 'snet_network_analytics_bipartite.BipartiteNodes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.BipartiteNodes.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.BipartiteNodes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.BipartiteNodes} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteNodes.toObject = function(includeInstance, msg) {
  var f, obj = {
    bipartite0List: jspb.Message.getField(msg, 1),
    bipartite1List: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.BipartiteNodes}
 */
snet_network_analytics_bipartite.BipartiteNodes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.BipartiteNodes;
  return snet_network_analytics_bipartite.BipartiteNodes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.BipartiteNodes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.BipartiteNodes}
 */
snet_network_analytics_bipartite.BipartiteNodes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getBipartite0List().push(value);
      msg.setBipartite0List(msg.getBipartite0List());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getBipartite1List().push(value);
      msg.setBipartite1List(msg.getBipartite1List());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.BipartiteNodes} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteNodes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBipartite0List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getBipartite1List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.BipartiteNodes} The clone.
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.BipartiteNodes} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string bipartite_0 = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.getBipartite0List = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.BipartiteNodes.prototype.setBipartite0List = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_network_analytics_bipartite.BipartiteNodes.prototype.clearBipartite0List = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated string bipartite_1 = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.BipartiteNodes.prototype.getBipartite1List = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.BipartiteNodes.prototype.setBipartite1List = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


snet_network_analytics_bipartite.BipartiteNodes.prototype.clearBipartite1List = function() {
  jspb.Message.setField(this, 2, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.BipartiteGraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.BipartiteGraph.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.BipartiteGraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.BipartiteGraph.displayName = 'snet_network_analytics_bipartite.BipartiteGraph';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.BipartiteGraph.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.BipartiteGraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.BipartiteGraph} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraph.toObject = function(includeInstance, msg) {
  var f, obj = {
    bipartite0List: jspb.Message.getField(msg, 1),
    bipartite1List: jspb.Message.getField(msg, 2),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    snet_network_analytics_bipartite.Edge.toObject, includeInstance),
    weightsList: jspb.Message.getRepeatedFloatingPointField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.BipartiteGraph}
 */
snet_network_analytics_bipartite.BipartiteGraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.BipartiteGraph;
  return snet_network_analytics_bipartite.BipartiteGraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.BipartiteGraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.BipartiteGraph}
 */
snet_network_analytics_bipartite.BipartiteGraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getBipartite0List().push(value);
      msg.setBipartite0List(msg.getBipartite0List());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getBipartite1List().push(value);
      msg.setBipartite1List(msg.getBipartite1List());
      break;
    case 3:
      var value = new snet_network_analytics_bipartite.Edge;
      reader.readMessage(value,snet_network_analytics_bipartite.Edge.deserializeBinaryFromReader);
      msg.getEdgesList().push(value);
      msg.setEdgesList(msg.getEdgesList());
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedDouble());
      msg.setWeightsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.BipartiteGraph} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraph.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getBipartite0List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = this.getBipartite1List();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      snet_network_analytics_bipartite.Edge.serializeBinaryToWriter
    );
  }
  f = this.getWeightsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.BipartiteGraph} The clone.
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.BipartiteGraph} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string bipartite_0 = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.getBipartite0List = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.BipartiteGraph.prototype.setBipartite0List = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_network_analytics_bipartite.BipartiteGraph.prototype.clearBipartite0List = function() {
  jspb.Message.setField(this, 1, []);
};


/**
 * repeated string bipartite_1 = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.getBipartite1List = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.BipartiteGraph.prototype.setBipartite1List = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


snet_network_analytics_bipartite.BipartiteGraph.prototype.clearBipartite1List = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * repeated Edge edges = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_network_analytics_bipartite.Edge>}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.getEdgesList = function() {
  return /** @type{!Array.<!snet_network_analytics_bipartite.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_network_analytics_bipartite.Edge, 3));
};


/** @param {Array.<!snet_network_analytics_bipartite.Edge>} value  */
snet_network_analytics_bipartite.BipartiteGraph.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


snet_network_analytics_bipartite.BipartiteGraph.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};


/**
 * repeated double weights = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
snet_network_analytics_bipartite.BipartiteGraph.prototype.getWeightsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 4));
};


/** @param {Array.<number>} value  */
snet_network_analytics_bipartite.BipartiteGraph.prototype.setWeightsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


snet_network_analytics_bipartite.BipartiteGraph.prototype.clearWeightsList = function() {
  jspb.Message.setField(this, 4, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.BipartiteGraphRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.BipartiteGraphRequest.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.BipartiteGraphRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.BipartiteGraphRequest.displayName = 'snet_network_analytics_bipartite.BipartiteGraphRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.BipartiteGraphRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.BipartiteGraphRequest} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodes: (f = msg.getNodes()) && snet_network_analytics_bipartite.BipartiteNodes.toObject(includeInstance, f),
    edgesList: jspb.Message.toObjectList(msg.getEdgesList(),
    snet_network_analytics_bipartite.Edge.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphRequest}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.BipartiteGraphRequest;
  return snet_network_analytics_bipartite.BipartiteGraphRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.BipartiteGraphRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphRequest}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_network_analytics_bipartite.BipartiteNodes;
      reader.readMessage(value,snet_network_analytics_bipartite.BipartiteNodes.deserializeBinaryFromReader);
      msg.setNodes(value);
      break;
    case 2:
      var value = new snet_network_analytics_bipartite.Edge;
      reader.readMessage(value,snet_network_analytics_bipartite.Edge.deserializeBinaryFromReader);
      msg.getEdgesList().push(value);
      msg.setEdgesList(msg.getEdgesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.BipartiteGraphRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNodes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snet_network_analytics_bipartite.BipartiteNodes.serializeBinaryToWriter
    );
  }
  f = this.getEdgesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_network_analytics_bipartite.Edge.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphRequest} The clone.
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.BipartiteGraphRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional BipartiteNodes nodes = 1;
 * @return {snet_network_analytics_bipartite.BipartiteNodes}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.getNodes = function() {
  return /** @type{snet_network_analytics_bipartite.BipartiteNodes} */ (
    jspb.Message.getWrapperField(this, snet_network_analytics_bipartite.BipartiteNodes, 1));
};


/** @param {snet_network_analytics_bipartite.BipartiteNodes|undefined} value  */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.setNodes = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.clearNodes = function() {
  this.setNodes(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.hasNodes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Edge edges = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_network_analytics_bipartite.Edge>}
 */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.getEdgesList = function() {
  return /** @type{!Array.<!snet_network_analytics_bipartite.Edge>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_network_analytics_bipartite.Edge, 2));
};


/** @param {Array.<!snet_network_analytics_bipartite.Edge>} value  */
snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.setEdgesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_network_analytics_bipartite.BipartiteGraphRequest.prototype.clearEdgesList = function() {
  this.setEdgesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.BipartiteGraphResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_network_analytics_bipartite.BipartiteGraphResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.BipartiteGraphResponse.displayName = 'snet_network_analytics_bipartite.BipartiteGraphResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.BipartiteGraphResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.BipartiteGraphResponse} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    message: msg.getMessage(),
    output: (f = msg.getOutput()) && snet_network_analytics_bipartite.BipartiteGraph.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphResponse}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.BipartiteGraphResponse;
  return snet_network_analytics_bipartite.BipartiteGraphResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.BipartiteGraphResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphResponse}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new snet_network_analytics_bipartite.BipartiteGraph;
      reader.readMessage(value,snet_network_analytics_bipartite.BipartiteGraph.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.BipartiteGraphResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      snet_network_analytics_bipartite.BipartiteGraph.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.BipartiteGraphResponse} The clone.
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.BipartiteGraphResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional BipartiteGraph output = 3;
 * @return {snet_network_analytics_bipartite.BipartiteGraph}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.getOutput = function() {
  return /** @type{snet_network_analytics_bipartite.BipartiteGraph} */ (
    jspb.Message.getWrapperField(this, snet_network_analytics_bipartite.BipartiteGraph, 3));
};


/** @param {snet_network_analytics_bipartite.BipartiteGraph|undefined} value  */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_network_analytics_bipartite.BipartiteGraphResponse.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_network_analytics_bipartite.ProjecetedGraphRequest.repeatedFields_, null);
};
goog.inherits(snet_network_analytics_bipartite.ProjecetedGraphRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.ProjecetedGraphRequest.displayName = 'snet_network_analytics_bipartite.ProjecetedGraphRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.ProjecetedGraphRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphRequest} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    graph: (f = msg.getGraph()) && snet_network_analytics_bipartite.BipartiteGraph.toObject(includeInstance, f),
    nodesList: jspb.Message.getField(msg, 2),
    weight: msg.getWeight()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphRequest}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.ProjecetedGraphRequest;
  return snet_network_analytics_bipartite.ProjecetedGraphRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphRequest}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_network_analytics_bipartite.BipartiteGraph;
      reader.readMessage(value,snet_network_analytics_bipartite.BipartiteGraph.deserializeBinaryFromReader);
      msg.setGraph(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.getNodesList().push(value);
      msg.setNodesList(msg.getNodesList());
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGraph();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snet_network_analytics_bipartite.BipartiteGraph.serializeBinaryToWriter
    );
  }
  f = this.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = this.getWeight();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphRequest} The clone.
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.ProjecetedGraphRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional BipartiteGraph graph = 1;
 * @return {snet_network_analytics_bipartite.BipartiteGraph}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.getGraph = function() {
  return /** @type{snet_network_analytics_bipartite.BipartiteGraph} */ (
    jspb.Message.getWrapperField(this, snet_network_analytics_bipartite.BipartiteGraph, 1));
};


/** @param {snet_network_analytics_bipartite.BipartiteGraph|undefined} value  */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.setGraph = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.clearGraph = function() {
  this.setGraph(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.hasGraph = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string nodes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.getNodesList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 2));
};


/** @param {Array.<string>} value  */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.setNodesList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.clearNodesList = function() {
  jspb.Message.setField(this, 2, []);
};


/**
 * optional string weight = 3;
 * @return {string}
 */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.getWeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
snet_network_analytics_bipartite.ProjecetedGraphRequest.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_network_analytics_bipartite.ProjecetedGraphResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_network_analytics_bipartite.ProjecetedGraphResponse.displayName = 'snet_network_analytics_bipartite.ProjecetedGraphResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.toObject = function(opt_includeInstance) {
  return snet_network_analytics_bipartite.ProjecetedGraphResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphResponse} msg The msg instance to transform.
 * @return {!Object}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: msg.getStatus(),
    message: msg.getMessage(),
    output: (f = msg.getOutput()) && snet_network_analytics_bipartite.Graph.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphResponse}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_network_analytics_bipartite.ProjecetedGraphResponse;
  return snet_network_analytics_bipartite.ProjecetedGraphResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphResponse}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = new snet_network_analytics_bipartite.Graph;
      reader.readMessage(value,snet_network_analytics_bipartite.Graph.deserializeBinaryFromReader);
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_network_analytics_bipartite.ProjecetedGraphResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getOutput();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      snet_network_analytics_bipartite.Graph.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_network_analytics_bipartite.ProjecetedGraphResponse} The clone.
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.cloneMessage = function() {
  return /** @type {!snet_network_analytics_bipartite.ProjecetedGraphResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bool status = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 1, false));
};


/** @param {boolean} value  */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Graph output = 3;
 * @return {snet_network_analytics_bipartite.Graph}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.getOutput = function() {
  return /** @type{snet_network_analytics_bipartite.Graph} */ (
    jspb.Message.getWrapperField(this, snet_network_analytics_bipartite.Graph, 3));
};


/** @param {snet_network_analytics_bipartite.Graph|undefined} value  */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.setOutput = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.clearOutput = function() {
  this.setOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_network_analytics_bipartite.ProjecetedGraphResponse.prototype.hasOutput = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, snet_network_analytics_bipartite);
