/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/*eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('snet_coreference_resolution_service.Indexes', null, global);
goog.exportSymbol('snet_coreference_resolution_service.InputSentence', null, global);
goog.exportSymbol('snet_coreference_resolution_service.ReferenceResolution', null, global);
goog.exportSymbol('snet_coreference_resolution_service.References', null, global);
goog.exportSymbol('snet_coreference_resolution_service.Words', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_coreference_resolution_service.InputSentence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_coreference_resolution_service.InputSentence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_coreference_resolution_service.InputSentence.displayName = 'snet_coreference_resolution_service.InputSentence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_coreference_resolution_service.InputSentence.prototype.toObject = function(opt_includeInstance) {
  return snet_coreference_resolution_service.InputSentence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_coreference_resolution_service.InputSentence} msg The msg instance to transform.
 * @return {!Object}
 */
snet_coreference_resolution_service.InputSentence.toObject = function(includeInstance, msg) {
  var f, obj = {
    sentence: msg.getSentence()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_coreference_resolution_service.InputSentence}
 */
snet_coreference_resolution_service.InputSentence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_coreference_resolution_service.InputSentence;
  return snet_coreference_resolution_service.InputSentence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_coreference_resolution_service.InputSentence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_coreference_resolution_service.InputSentence}
 */
snet_coreference_resolution_service.InputSentence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSentence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_coreference_resolution_service.InputSentence} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.InputSentence.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_coreference_resolution_service.InputSentence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.InputSentence.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSentence();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_coreference_resolution_service.InputSentence} The clone.
 */
snet_coreference_resolution_service.InputSentence.prototype.cloneMessage = function() {
  return /** @type {!snet_coreference_resolution_service.InputSentence} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string sentence = 1;
 * @return {string}
 */
snet_coreference_resolution_service.InputSentence.prototype.getSentence = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
snet_coreference_resolution_service.InputSentence.prototype.setSentence = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_coreference_resolution_service.ReferenceResolution = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_coreference_resolution_service.ReferenceResolution.repeatedFields_, null);
};
goog.inherits(snet_coreference_resolution_service.ReferenceResolution, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_coreference_resolution_service.ReferenceResolution.displayName = 'snet_coreference_resolution_service.ReferenceResolution';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_coreference_resolution_service.ReferenceResolution.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.toObject = function(opt_includeInstance) {
  return snet_coreference_resolution_service.ReferenceResolution.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_coreference_resolution_service.ReferenceResolution} msg The msg instance to transform.
 * @return {!Object}
 */
snet_coreference_resolution_service.ReferenceResolution.toObject = function(includeInstance, msg) {
  var f, obj = {
    referencesList: jspb.Message.toObjectList(msg.getReferencesList(),
    snet_coreference_resolution_service.References.toObject, includeInstance),
    words: (f = msg.getWords()) && snet_coreference_resolution_service.Words.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_coreference_resolution_service.ReferenceResolution}
 */
snet_coreference_resolution_service.ReferenceResolution.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_coreference_resolution_service.ReferenceResolution;
  return snet_coreference_resolution_service.ReferenceResolution.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_coreference_resolution_service.ReferenceResolution} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_coreference_resolution_service.ReferenceResolution}
 */
snet_coreference_resolution_service.ReferenceResolution.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_coreference_resolution_service.References;
      reader.readMessage(value,snet_coreference_resolution_service.References.deserializeBinaryFromReader);
      msg.getReferencesList().push(value);
      msg.setReferencesList(msg.getReferencesList());
      break;
    case 2:
      var value = new snet_coreference_resolution_service.Words;
      reader.readMessage(value,snet_coreference_resolution_service.Words.deserializeBinaryFromReader);
      msg.setWords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_coreference_resolution_service.ReferenceResolution} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.ReferenceResolution.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getReferencesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      snet_coreference_resolution_service.References.serializeBinaryToWriter
    );
  }
  f = this.getWords();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      snet_coreference_resolution_service.Words.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_coreference_resolution_service.ReferenceResolution} The clone.
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.cloneMessage = function() {
  return /** @type {!snet_coreference_resolution_service.ReferenceResolution} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated References references = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_coreference_resolution_service.References>}
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.getReferencesList = function() {
  return /** @type{!Array.<!snet_coreference_resolution_service.References>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_coreference_resolution_service.References, 1));
};


/** @param {Array.<!snet_coreference_resolution_service.References>} value  */
snet_coreference_resolution_service.ReferenceResolution.prototype.setReferencesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


snet_coreference_resolution_service.ReferenceResolution.prototype.clearReferencesList = function() {
  this.setReferencesList([]);
};


/**
 * optional Words words = 2;
 * @return {snet_coreference_resolution_service.Words}
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.getWords = function() {
  return /** @type{snet_coreference_resolution_service.Words} */ (
    jspb.Message.getWrapperField(this, snet_coreference_resolution_service.Words, 2));
};


/** @param {snet_coreference_resolution_service.Words|undefined} value  */
snet_coreference_resolution_service.ReferenceResolution.prototype.setWords = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


snet_coreference_resolution_service.ReferenceResolution.prototype.clearWords = function() {
  this.setWords(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_coreference_resolution_service.ReferenceResolution.prototype.hasWords = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_coreference_resolution_service.References = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_coreference_resolution_service.References.repeatedFields_, null);
};
goog.inherits(snet_coreference_resolution_service.References, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_coreference_resolution_service.References.displayName = 'snet_coreference_resolution_service.References';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_coreference_resolution_service.References.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_coreference_resolution_service.References.prototype.toObject = function(opt_includeInstance) {
  return snet_coreference_resolution_service.References.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_coreference_resolution_service.References} msg The msg instance to transform.
 * @return {!Object}
 */
snet_coreference_resolution_service.References.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && snet_coreference_resolution_service.Indexes.toObject(includeInstance, f),
    mappingsList: jspb.Message.toObjectList(msg.getMappingsList(),
    snet_coreference_resolution_service.Indexes.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_coreference_resolution_service.References}
 */
snet_coreference_resolution_service.References.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_coreference_resolution_service.References;
  return snet_coreference_resolution_service.References.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_coreference_resolution_service.References} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_coreference_resolution_service.References}
 */
snet_coreference_resolution_service.References.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new snet_coreference_resolution_service.Indexes;
      reader.readMessage(value,snet_coreference_resolution_service.Indexes.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new snet_coreference_resolution_service.Indexes;
      reader.readMessage(value,snet_coreference_resolution_service.Indexes.deserializeBinaryFromReader);
      msg.getMappingsList().push(value);
      msg.setMappingsList(msg.getMappingsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_coreference_resolution_service.References} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.References.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_coreference_resolution_service.References.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.References.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      snet_coreference_resolution_service.Indexes.serializeBinaryToWriter
    );
  }
  f = this.getMappingsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      snet_coreference_resolution_service.Indexes.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_coreference_resolution_service.References} The clone.
 */
snet_coreference_resolution_service.References.prototype.cloneMessage = function() {
  return /** @type {!snet_coreference_resolution_service.References} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional Indexes key = 1;
 * @return {snet_coreference_resolution_service.Indexes}
 */
snet_coreference_resolution_service.References.prototype.getKey = function() {
  return /** @type{snet_coreference_resolution_service.Indexes} */ (
    jspb.Message.getWrapperField(this, snet_coreference_resolution_service.Indexes, 1));
};


/** @param {snet_coreference_resolution_service.Indexes|undefined} value  */
snet_coreference_resolution_service.References.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


snet_coreference_resolution_service.References.prototype.clearKey = function() {
  this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
snet_coreference_resolution_service.References.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Indexes mappings = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!snet_coreference_resolution_service.Indexes>}
 */
snet_coreference_resolution_service.References.prototype.getMappingsList = function() {
  return /** @type{!Array.<!snet_coreference_resolution_service.Indexes>} */ (
    jspb.Message.getRepeatedWrapperField(this, snet_coreference_resolution_service.Indexes, 2));
};


/** @param {Array.<!snet_coreference_resolution_service.Indexes>} value  */
snet_coreference_resolution_service.References.prototype.setMappingsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


snet_coreference_resolution_service.References.prototype.clearMappingsList = function() {
  this.setMappingsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_coreference_resolution_service.Indexes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(snet_coreference_resolution_service.Indexes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_coreference_resolution_service.Indexes.displayName = 'snet_coreference_resolution_service.Indexes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_coreference_resolution_service.Indexes.prototype.toObject = function(opt_includeInstance) {
  return snet_coreference_resolution_service.Indexes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_coreference_resolution_service.Indexes} msg The msg instance to transform.
 * @return {!Object}
 */
snet_coreference_resolution_service.Indexes.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstindex: msg.getFirstindex(),
    secondindex: msg.getSecondindex()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_coreference_resolution_service.Indexes}
 */
snet_coreference_resolution_service.Indexes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_coreference_resolution_service.Indexes;
  return snet_coreference_resolution_service.Indexes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_coreference_resolution_service.Indexes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_coreference_resolution_service.Indexes}
 */
snet_coreference_resolution_service.Indexes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFirstindex(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSecondindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_coreference_resolution_service.Indexes} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.Indexes.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_coreference_resolution_service.Indexes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.Indexes.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFirstindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getSecondindex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_coreference_resolution_service.Indexes} The clone.
 */
snet_coreference_resolution_service.Indexes.prototype.cloneMessage = function() {
  return /** @type {!snet_coreference_resolution_service.Indexes} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 firstIndex = 1;
 * @return {number}
 */
snet_coreference_resolution_service.Indexes.prototype.getFirstindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
snet_coreference_resolution_service.Indexes.prototype.setFirstindex = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int32 secondIndex = 2;
 * @return {number}
 */
snet_coreference_resolution_service.Indexes.prototype.getSecondindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
snet_coreference_resolution_service.Indexes.prototype.setSecondindex = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
snet_coreference_resolution_service.Words = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, snet_coreference_resolution_service.Words.repeatedFields_, null);
};
goog.inherits(snet_coreference_resolution_service.Words, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  snet_coreference_resolution_service.Words.displayName = 'snet_coreference_resolution_service.Words';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
snet_coreference_resolution_service.Words.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
snet_coreference_resolution_service.Words.prototype.toObject = function(opt_includeInstance) {
  return snet_coreference_resolution_service.Words.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!snet_coreference_resolution_service.Words} msg The msg instance to transform.
 * @return {!Object}
 */
snet_coreference_resolution_service.Words.toObject = function(includeInstance, msg) {
  var f, obj = {
    wordList: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!snet_coreference_resolution_service.Words}
 */
snet_coreference_resolution_service.Words.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new snet_coreference_resolution_service.Words;
  return snet_coreference_resolution_service.Words.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!snet_coreference_resolution_service.Words} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!snet_coreference_resolution_service.Words}
 */
snet_coreference_resolution_service.Words.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.getWordList().push(value);
      msg.setWordList(msg.getWordList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!snet_coreference_resolution_service.Words} message
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.Words.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
snet_coreference_resolution_service.Words.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
snet_coreference_resolution_service.Words.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getWordList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!snet_coreference_resolution_service.Words} The clone.
 */
snet_coreference_resolution_service.Words.prototype.cloneMessage = function() {
  return /** @type {!snet_coreference_resolution_service.Words} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated string word = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<string>}
 */
snet_coreference_resolution_service.Words.prototype.getWordList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getField(this, 1));
};


/** @param {Array.<string>} value  */
snet_coreference_resolution_service.Words.prototype.setWordList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


snet_coreference_resolution_service.Words.prototype.clearWordList = function() {
  jspb.Message.setField(this, 1, []);
};


goog.object.extend(exports, snet_coreference_resolution_service);
