/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

goog.exportSymbol("proto.Annotation", null, global);
goog.exportSymbol("proto.AnnotationRequest", null, global);
goog.exportSymbol("proto.AnnotationResponse", null, global);
goog.exportSymbol("proto.Filter", null, global);
goog.exportSymbol("proto.Gene", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Filter.displayName = "proto.Filter";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Filter.prototype.toObject = function(opt_includeInstance) {
    return proto.Filter.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Filter} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.Filter.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        filter: jspb.Message.getFieldWithDefault(msg, 1, ""),
        value: jspb.Message.getFieldWithDefault(msg, 2, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Filter}
 */
proto.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Filter();
  return proto.Filter.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Filter}
 */
proto.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFilter(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setValue(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Filter} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
};

/**
 * optional string filter = 1;
 * @return {string}
 */
proto.Filter.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.Filter.prototype.setFilter = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional string value = 2;
 * @return {string}
 */
proto.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};

/** @param {string} value */
proto.Filter.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Annotation = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Annotation.repeatedFields_,
    null
  );
};
goog.inherits(proto.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Annotation.displayName = "proto.Annotation";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Annotation.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Annotation.prototype.toObject = function(opt_includeInstance) {
    return proto.Annotation.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Annotation} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.Annotation.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        functionname: jspb.Message.getFieldWithDefault(msg, 1, ""),
        filtersList: jspb.Message.toObjectList(
          msg.getFiltersList(),
          proto.Filter.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Annotation}
 */
proto.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Annotation();
  return proto.Annotation.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Annotation}
 */
proto.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setFunctionname(value);
        break;
      case 2:
        var value = new proto.Filter();
        reader.readMessage(value, proto.Filter.deserializeBinaryFromReader);
        msg.addFilters(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFunctionname();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.Filter.serializeBinaryToWriter);
  }
};

/**
 * optional string functionName = 1;
 * @return {string}
 */
proto.Annotation.prototype.getFunctionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.Annotation.prototype.setFunctionname = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated Filter filters = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Filter>}
 */
proto.Annotation.prototype.getFiltersList = function() {
  return /** @type{!Array.<!proto.Filter>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Filter,
    2
  ));
};

/** @param {!Array.<!proto.Filter>} value */
proto.Annotation.prototype.setFiltersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Filter}
 */
proto.Annotation.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.Filter,
    opt_index
  );
};

proto.Annotation.prototype.clearFiltersList = function() {
  this.setFiltersList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Gene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Gene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Gene.displayName = "proto.Gene";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Gene.prototype.toObject = function(opt_includeInstance) {
    return proto.Gene.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Gene} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.Gene.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        genename: jspb.Message.getFieldWithDefault(msg, 1, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Gene}
 */
proto.Gene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Gene();
  return proto.Gene.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Gene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Gene}
 */
proto.Gene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setGenename(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Gene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Gene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Gene} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Gene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenename();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string geneName = 1;
 * @return {string}
 */
proto.Gene.prototype.getGenename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.Gene.prototype.setGenename = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnnotationRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.AnnotationRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.AnnotationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnnotationRequest.displayName = "proto.AnnotationRequest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnnotationRequest.repeatedFields_ = [1, 2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.AnnotationRequest.prototype.toObject = function(opt_includeInstance) {
    return proto.AnnotationRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.AnnotationRequest} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.AnnotationRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        annotationsList: jspb.Message.toObjectList(
          msg.getAnnotationsList(),
          proto.Annotation.toObject,
          includeInstance
        ),
        genesList: jspb.Message.toObjectList(
          msg.getGenesList(),
          proto.Gene.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnnotationRequest}
 */
proto.AnnotationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnnotationRequest();
  return proto.AnnotationRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnnotationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnnotationRequest}
 */
proto.AnnotationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Annotation();
        reader.readMessage(value, proto.Annotation.deserializeBinaryFromReader);
        msg.addAnnotations(value);
        break;
      case 2:
        var value = new proto.Gene();
        reader.readMessage(value, proto.Gene.deserializeBinaryFromReader);
        msg.addGenes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnnotationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnnotationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnnotationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AnnotationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, proto.Annotation.serializeBinaryToWriter);
  }
  f = message.getGenesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(2, f, proto.Gene.serializeBinaryToWriter);
  }
};

/**
 * repeated Annotation annotations = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Annotation>}
 */
proto.AnnotationRequest.prototype.getAnnotationsList = function() {
  return /** @type{!Array.<!proto.Annotation>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Annotation,
    1
  ));
};

/** @param {!Array.<!proto.Annotation>} value */
proto.AnnotationRequest.prototype.setAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Annotation}
 */
proto.AnnotationRequest.prototype.addAnnotations = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Annotation,
    opt_index
  );
};

proto.AnnotationRequest.prototype.clearAnnotationsList = function() {
  this.setAnnotationsList([]);
};

/**
 * repeated Gene genes = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Gene>}
 */
proto.AnnotationRequest.prototype.getGenesList = function() {
  return /** @type{!Array.<!proto.Gene>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Gene,
    2
  ));
};

/** @param {!Array.<!proto.Gene>} value */
proto.AnnotationRequest.prototype.setGenesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.Gene=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Gene}
 */
proto.AnnotationRequest.prototype.addGenes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.Gene,
    opt_index
  );
};

proto.AnnotationRequest.prototype.clearGenesList = function() {
  this.setGenesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnnotationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AnnotationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AnnotationResponse.displayName = "proto.AnnotationResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.AnnotationResponse.prototype.toObject = function(opt_includeInstance) {
    return proto.AnnotationResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.AnnotationResponse} msg The msg instance to transform.
   * @return {!Object}
   */
  proto.AnnotationResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        result: jspb.Message.getFieldWithDefault(msg, 1, "")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnnotationResponse}
 */
proto.AnnotationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnnotationResponse();
  return proto.AnnotationResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnnotationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnnotationResponse}
 */
proto.AnnotationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnnotationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnnotationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnnotationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.AnnotationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f.length > 0) {
    writer.writeString(1, f);
  }
};

/**
 * optional string result = 1;
 * @return {string}
 */
proto.AnnotationResponse.prototype.getResult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};

/** @param {string} value */
proto.AnnotationResponse.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};

goog.object.extend(exports, proto);